/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.5.1\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2020-05-04T22:49Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket #14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n      // Support: Chrome <=57, Firefox <=52\n      // In some browsers, typeof returns \"function\" for HTML <object> elements\n      // (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n      // We don't want to classify *any* DOM node as a function.\n      return typeof obj === \"function\" && typeof obj.nodeType !== \"number\";\n  };\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.5.1\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\nfunction( _i, name ) {\n\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.5\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2020-03-14\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trcombinators = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem.namespaceURI,\n\t\tdocElem = ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\t\t\tvar adown = a.nodeType === 9 ? a.documentElement : a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE<8\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rcombinators.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n};\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n\t// Strict HTML recognition (#11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the master Deferred\n\t\t\tmaster = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tmaster.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( master.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn master.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), master.reject );\n\t\t}\n\n\t\treturn master.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See #6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\tvalue :\n\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (#9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see #8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (#14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (#11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (#14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (#12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar\n\trkeyEvent = /^key/,\n\trmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n\trtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (#13208)\n\t\t\t\t// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (#13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\treturn result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (#504, #13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\n\twhich: function( event ) {\n\t\tvar button = event.button;\n\n\t\t// Add which for key events\n\t\tif ( event.which == null && rkeyEvent.test( event.type ) ) {\n\t\t\treturn event.charCode != null ? event.charCode : event.keyCode;\n\t\t}\n\n\t\t// Add which for click: 1 === left; 2 === middle; 3 === right\n\t\tif ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {\n\t\t\tif ( button & 1 ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ( button & 2 ) {\n\t\t\t\treturn 3;\n\t\t\t}\n\n\t\t\tif ( button & 4 ) {\n\t\t\t\treturn 2;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn event.which;\n\t}\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\trcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (#8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (#8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px\";\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = parseInt( trStyle.height ) > 3;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, #12537)\n\t//   .css('--customProperty) (#3144)\n\tif ( computed ) {\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\trcustomProp = /^--/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug #9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (#7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t\t} ) :\n\t\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\t\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n\t\t\t\t// Use proper attribute retrieval(#12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + clazz + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += clazz + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classes, elem, cur, curValue, clazz, j, finalValue,\n\t\t\ti = 0;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclasses = classesToArray( value );\n\n\t\tif ( classes.length ) {\n\t\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\t\tcurValue = getClass( elem );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = elem.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tj = 0;\n\t\t\t\t\twhile ( ( clazz = classes[ j++ ] ) ) {\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + clazz + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + clazz + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\telem.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar type = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar className, i, self, classNames;\n\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\ti = 0;\n\t\t\t\tself = jQuery( this );\n\t\t\t\tclassNames = classesToArray( value );\n\n\t\t\t\twhile ( ( className = classNames[ i++ ] ) ) {\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (#14686, #14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (#2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (#9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = (\n\t\t\t\t\tdataPriv.get( cur, \"events\" ) || Object.create( null )\n\t\t\t\t)[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (#6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {\n\t\txml = undefined;\n\t}\n\n\tif ( !xml || xml.getElementsByTagName( \"parsererror\" ).length ) {\n\t\tjQuery.error( \"Invalid XML: \" + data );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} )\n\t\t.filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} )\n\t\t.map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// #7653, #8125, #8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\toriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (#10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket #12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// #9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script\n\t\t\tif ( !isSuccess && jQuery.inArray( \"script\", s.dataTypes ) > -1 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (#11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// #1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see #8605, #14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// #14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tif ( typeof props.top === \"number\" ) {\n\t\t\t\tprops.top += \"px\";\n\t\t\t}\n\t\t\tif ( typeof props.left === \"number\" ) {\n\t\t\t\tprops.left += \"px\";\n\t\t\t}\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( { padding: \"inner\" + name, content: type, \"\": \"outer\" + name },\n\t\tfunction( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each( ( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t} );\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jquery/dist/jquery.js\n");

/***/ }),

/***/ "./public/mdb/js/addons/datatables.min.js":
/*!************************************************!*\
  !*** ./public/mdb/js/addons/datatables.min.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n!function (t) {\n  var e = {};\n\n  function n(r) {\n    if (e[r]) return e[r].exports;\n    var a = e[r] = {\n      i: r,\n      l: !1,\n      exports: {}\n    };\n    return t[r].call(a.exports, a, a.exports, n), a.l = !0, a.exports;\n  }\n\n  n.m = t, n.c = e, n.d = function (t, e, r) {\n    n.o(t, e) || Object.defineProperty(t, e, {\n      enumerable: !0,\n      get: r\n    });\n  }, n.r = function (t) {\n    \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {\n      value: \"Module\"\n    }), Object.defineProperty(t, \"__esModule\", {\n      value: !0\n    });\n  }, n.t = function (t, e) {\n    if (1 & e && (t = n(t)), 8 & e) return t;\n    if (4 & e && \"object\" == _typeof(t) && t && t.__esModule) return t;\n    var r = Object.create(null);\n    if (n.r(r), Object.defineProperty(r, \"default\", {\n      enumerable: !0,\n      value: t\n    }), 2 & e && \"string\" != typeof t) for (var a in t) {\n      n.d(r, a, function (e) {\n        return t[e];\n      }.bind(null, a));\n    }\n    return r;\n  }, n.n = function (t) {\n    var e = t && t.__esModule ? function () {\n      return t[\"default\"];\n    } : function () {\n      return t;\n    };\n    return n.d(e, \"a\", e), e;\n  }, n.o = function (t, e) {\n    return Object.prototype.hasOwnProperty.call(t, e);\n  }, n.p = \"\", n(n.s = 245);\n}([function (t, e, n) {\n  (function (e) {\n    var n = function n(t) {\n      return t && t.Math == Math && t;\n    };\n\n    t.exports = n(\"object\" == (typeof globalThis === \"undefined\" ? \"undefined\" : _typeof(globalThis)) && globalThis) || n(\"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window) || n(\"object\" == (typeof self === \"undefined\" ? \"undefined\" : _typeof(self)) && self) || n(\"object\" == _typeof(e) && e) || Function(\"return this\")();\n  }).call(this, n(54));\n}, function (t, e) {\n  t.exports = function (t) {\n    try {\n      return !!t();\n    } catch (t) {\n      return !0;\n    }\n  };\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(12),\n      o = n(26),\n      i = n(46),\n      s = r.Symbol,\n      l = a(\"wks\");\n\n  t.exports = function (t) {\n    return l[t] || (l[t] = i && s[t] || (i ? s : o)(\"Symbol.\" + t));\n  };\n}, function (t, e) {\n  var n = {}.hasOwnProperty;\n\n  t.exports = function (t, e) {\n    return n.call(t, e);\n  };\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(22).f,\n      o = n(6),\n      i = n(14),\n      s = n(21),\n      l = n(47),\n      u = n(48);\n\n  t.exports = function (t, e) {\n    var n,\n        c,\n        f,\n        d,\n        h,\n        p = t.target,\n        g = t.global,\n        v = t.stat;\n    if (n = g ? r : v ? r[p] || s(p, {}) : (r[p] || {}).prototype) for (c in e) {\n      if (d = e[c], f = t.noTargetGet ? (h = a(n, c)) && h.value : n[c], !u(g ? c : p + (v ? \".\" : \"#\") + c, t.forced) && void 0 !== f) {\n        if (_typeof(d) == _typeof(f)) continue;\n        l(d, f);\n      }\n\n      (t.sham || f && f.sham) && o(d, \"sham\", !0), i(n, c, d, t);\n    }\n  };\n}, function (t, e) {\n  t.exports = function (t) {\n    return \"object\" == _typeof(t) ? null !== t : \"function\" == typeof t;\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(9),\n      o = n(18);\n  t.exports = r ? function (t, e, n) {\n    return a.f(t, e, o(1, n));\n  } : function (t, e, n) {\n    return t[e] = n, t;\n  };\n}, function (t, e, n) {\n  var r = n(1);\n  t.exports = !r(function () {\n    return 7 != Object.defineProperty({}, \"a\", {\n      get: function get() {\n        return 7;\n      }\n    }).a;\n  });\n}, function (t, e, n) {\n  var r = n(5);\n\n  t.exports = function (t) {\n    if (!r(t)) throw TypeError(String(t) + \" is not an object\");\n    return t;\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(33),\n      o = n(8),\n      i = n(20),\n      s = Object.defineProperty;\n  e.f = r ? s : function (t, e, n) {\n    if (o(t), e = i(e, !0), o(n), a) try {\n      return s(t, e, n);\n    } catch (t) {}\n    if (\"get\" in n || \"set\" in n) throw TypeError(\"Accessors not supported\");\n    return \"value\" in n && (t[e] = n.value), t;\n  };\n}, function (t, e, n) {\n  var r = n(27),\n      a = n(13);\n\n  t.exports = function (t) {\n    return r(a(t));\n  };\n}, function (t, e, n) {\n  var r = n(15),\n      a = Math.min;\n\n  t.exports = function (t) {\n    return t > 0 ? a(r(t), 9007199254740991) : 0;\n  };\n}, function (t, e, n) {\n  var r = n(30),\n      a = n(55);\n  (t.exports = function (t, e) {\n    return a[t] || (a[t] = void 0 !== e ? e : {});\n  })(\"versions\", []).push({\n    version: \"3.3.2\",\n    mode: r ? \"pure\" : \"global\",\n    copyright: \"© 2019 Denis Pushkarev (zloirock.ru)\"\n  });\n}, function (t, e) {\n  t.exports = function (t) {\n    if (null == t) throw TypeError(\"Can't call method on \" + t);\n    return t;\n  };\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(12),\n      o = n(6),\n      i = n(3),\n      s = n(21),\n      l = n(34),\n      u = n(28),\n      c = u.get,\n      f = u.enforce,\n      d = String(l).split(\"toString\");\n  a(\"inspectSource\", function (t) {\n    return l.call(t);\n  }), (t.exports = function (t, e, n, a) {\n    var l = !!a && !!a.unsafe,\n        u = !!a && !!a.enumerable,\n        c = !!a && !!a.noTargetGet;\n    \"function\" == typeof n && (\"string\" != typeof e || i(n, \"name\") || o(n, \"name\", e), f(n).source = d.join(\"string\" == typeof e ? e : \"\")), t !== r ? (l ? !c && t[e] && (u = !0) : delete t[e], u ? t[e] = n : o(t, e, n)) : u ? t[e] = n : s(e, n);\n  })(Function.prototype, \"toString\", function () {\n    return \"function\" == typeof this && c(this).source || l.call(this);\n  });\n}, function (t, e) {\n  var n = Math.ceil,\n      r = Math.floor;\n\n  t.exports = function (t) {\n    return isNaN(t = +t) ? 0 : (t > 0 ? r : n)(t);\n  };\n}, function (t, e, n) {\n  var r = n(13);\n\n  t.exports = function (t) {\n    return Object(r(t));\n  };\n}, function (t, e) {\n  var n = {}.toString;\n\n  t.exports = function (t) {\n    return n.call(t).slice(8, -1);\n  };\n}, function (t, e) {\n  t.exports = function (t, e) {\n    return {\n      enumerable: !(1 & t),\n      configurable: !(2 & t),\n      writable: !(4 & t),\n      value: e\n    };\n  };\n}, function (t, e) {\n  t.exports = {};\n}, function (t, e, n) {\n  var r = n(5);\n\n  t.exports = function (t, e) {\n    if (!r(t)) return t;\n    var n, a;\n    if (e && \"function\" == typeof (n = t.toString) && !r(a = n.call(t))) return a;\n    if (\"function\" == typeof (n = t.valueOf) && !r(a = n.call(t))) return a;\n    if (!e && \"function\" == typeof (n = t.toString) && !r(a = n.call(t))) return a;\n    throw TypeError(\"Can't convert object to primitive value\");\n  };\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(6);\n\n  t.exports = function (t, e) {\n    try {\n      a(r, t, e);\n    } catch (n) {\n      r[t] = e;\n    }\n\n    return e;\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(40),\n      o = n(18),\n      i = n(10),\n      s = n(20),\n      l = n(3),\n      u = n(33),\n      c = Object.getOwnPropertyDescriptor;\n  e.f = r ? c : function (t, e) {\n    if (t = i(t), e = s(e, !0), u) try {\n      return c(t, e);\n    } catch (t) {}\n    if (l(t, e)) return o(!a.f.call(t, e), t[e]);\n  };\n}, function (t, e) {\n  t.exports = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\"];\n}, function (t, e, n) {\n  var r = n(57),\n      a = n(27),\n      o = n(16),\n      i = n(11),\n      s = n(42),\n      l = [].push,\n      u = function u(t) {\n    var e = 1 == t,\n        n = 2 == t,\n        u = 3 == t,\n        c = 4 == t,\n        f = 6 == t,\n        d = 5 == t || f;\n    return function (h, p, g, v) {\n      for (var b, y, m = o(h), S = a(m), x = r(p, g, 3), D = i(S.length), w = 0, _ = v || s, T = e ? _(h, D) : n ? _(h, 0) : void 0; D > w; w++) {\n        if ((d || w in S) && (y = x(b = S[w], w, m), t)) if (e) T[w] = y;else if (y) switch (t) {\n          case 3:\n            return !0;\n\n          case 5:\n            return b;\n\n          case 6:\n            return w;\n\n          case 2:\n            l.call(T, b);\n        } else if (c) return !1;\n      }\n\n      return f ? -1 : u || c ? c : T;\n    };\n  };\n\n  t.exports = {\n    forEach: u(0),\n    map: u(1),\n    filter: u(2),\n    some: u(3),\n    every: u(4),\n    find: u(5),\n    findIndex: u(6)\n  };\n}, function (t, e, n) {\n  var r = n(12),\n      a = n(26),\n      o = r(\"keys\");\n\n  t.exports = function (t) {\n    return o[t] || (o[t] = a(t));\n  };\n}, function (t, e) {\n  var n = 0,\n      r = Math.random();\n\n  t.exports = function (t) {\n    return \"Symbol(\" + String(void 0 === t ? \"\" : t) + \")_\" + (++n + r).toString(36);\n  };\n}, function (t, e, n) {\n  var r = n(1),\n      a = n(17),\n      o = \"\".split;\n  t.exports = r(function () {\n    return !Object(\"z\").propertyIsEnumerable(0);\n  }) ? function (t) {\n    return \"String\" == a(t) ? o.call(t, \"\") : Object(t);\n  } : Object;\n}, function (t, e, n) {\n  var r,\n      a,\n      o,\n      i = n(56),\n      s = n(0),\n      l = n(5),\n      u = n(6),\n      c = n(3),\n      f = n(25),\n      d = n(19),\n      h = s.WeakMap;\n\n  if (i) {\n    var p = new h(),\n        g = p.get,\n        v = p.has,\n        b = p.set;\n    r = function r(t, e) {\n      return b.call(p, t, e), e;\n    }, a = function a(t) {\n      return g.call(p, t) || {};\n    }, o = function o(t) {\n      return v.call(p, t);\n    };\n  } else {\n    var y = f(\"state\");\n    d[y] = !0, r = function r(t, e) {\n      return u(t, y, e), e;\n    }, a = function a(t) {\n      return c(t, y) ? t[y] : {};\n    }, o = function o(t) {\n      return c(t, y);\n    };\n  }\n\n  t.exports = {\n    set: r,\n    get: a,\n    has: o,\n    enforce: function enforce(t) {\n      return o(t) ? a(t) : r(t, {});\n    },\n    getterFor: function getterFor(t) {\n      return function (e) {\n        var n;\n        if (!l(e) || (n = a(e)).type !== t) throw TypeError(\"Incompatible receiver, \" + t + \" required\");\n        return n;\n      };\n    }\n  };\n}, function (t, e, n) {\n  var r = n(37),\n      a = n(23).concat(\"length\", \"prototype\");\n\n  e.f = Object.getOwnPropertyNames || function (t) {\n    return r(t, a);\n  };\n}, function (t, e) {\n  t.exports = !1;\n}, function (t, e, n) {\n  var r = n(17);\n\n  t.exports = Array.isArray || function (t) {\n    return \"Array\" == r(t);\n  };\n}, function (t, e, n) {\n  var r = n(45),\n      a = n(0),\n      o = function o(t) {\n    return \"function\" == typeof t ? t : void 0;\n  };\n\n  t.exports = function (t, e) {\n    return arguments.length < 2 ? o(r[t]) || o(a[t]) : r[t] && r[t][e] || a[t] && a[t][e];\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(1),\n      o = n(36);\n  t.exports = !r && !a(function () {\n    return 7 != Object.defineProperty(o(\"div\"), \"a\", {\n      get: function get() {\n        return 7;\n      }\n    }).a;\n  });\n}, function (t, e, n) {\n  var r = n(12);\n  t.exports = r(\"native-function-to-string\", Function.toString);\n}, function (t, e, n) {\n  var r = n(8),\n      a = n(63),\n      o = n(23),\n      i = n(19),\n      s = n(64),\n      l = n(36),\n      u = n(25)(\"IE_PROTO\"),\n      c = function c() {},\n      _f = function f() {\n    var t,\n        e = l(\"iframe\"),\n        n = o.length;\n\n    for (e.style.display = \"none\", s.appendChild(e), e.src = String(\"javascript:\"), (t = e.contentWindow.document).open(), t.write(\"<script>document.F=Object<\\/script>\"), t.close(), _f = t.F; n--;) {\n      delete _f.prototype[o[n]];\n    }\n\n    return _f();\n  };\n\n  t.exports = Object.create || function (t, e) {\n    var n;\n    return null !== t ? (c.prototype = r(t), n = new c(), c.prototype = null, n[u] = t) : n = _f(), void 0 === e ? n : a(n, e);\n  }, i[u] = !0;\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(5),\n      o = r.document,\n      i = a(o) && a(o.createElement);\n\n  t.exports = function (t) {\n    return i ? o.createElement(t) : {};\n  };\n}, function (t, e, n) {\n  var r = n(3),\n      a = n(10),\n      o = n(39).indexOf,\n      i = n(19);\n\n  t.exports = function (t, e) {\n    var n,\n        s = a(t),\n        l = 0,\n        u = [];\n\n    for (n in s) {\n      !r(i, n) && r(s, n) && u.push(n);\n    }\n\n    for (; e.length > l;) {\n      r(s, n = e[l++]) && (~o(u, n) || u.push(n));\n    }\n\n    return u;\n  };\n}, function (t, e, n) {\n  var r = n(15),\n      a = Math.max,\n      o = Math.min;\n\n  t.exports = function (t, e) {\n    var n = r(t);\n    return n < 0 ? a(n + e, 0) : o(n, e);\n  };\n}, function (t, e, n) {\n  var r = n(10),\n      a = n(11),\n      o = n(38),\n      i = function i(t) {\n    return function (e, n, i) {\n      var s,\n          l = r(e),\n          u = a(l.length),\n          c = o(i, u);\n\n      if (t && n != n) {\n        for (; u > c;) {\n          if ((s = l[c++]) != s) return !0;\n        }\n      } else for (; u > c; c++) {\n        if ((t || c in l) && l[c] === n) return t || c || 0;\n      }\n\n      return !t && -1;\n    };\n  };\n\n  t.exports = {\n    includes: i(!0),\n    indexOf: i(!1)\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = {}.propertyIsEnumerable,\n      a = Object.getOwnPropertyDescriptor,\n      o = a && !r.call({\n    1: 2\n  }, 1);\n  e.f = o ? function (t) {\n    var e = a(this, t);\n    return !!e && e.enumerable;\n  } : r;\n}, function (t, e, n) {\n  var r = n(37),\n      a = n(23);\n\n  t.exports = Object.keys || function (t) {\n    return r(t, a);\n  };\n}, function (t, e, n) {\n  var r = n(5),\n      a = n(31),\n      o = n(2)(\"species\");\n\n  t.exports = function (t, e) {\n    var n;\n    return a(t) && (\"function\" != typeof (n = t.constructor) || n !== Array && !a(n.prototype) ? r(n) && null === (n = n[o]) && (n = void 0) : n = void 0), new (void 0 === n ? Array : n)(0 === e ? 0 : e);\n  };\n}, function (t, e) {\n  e.f = Object.getOwnPropertySymbols;\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(24).find,\n      o = n(51),\n      i = !0;\n  \"find\" in [] && Array(1).find(function () {\n    i = !1;\n  }), r({\n    target: \"Array\",\n    proto: !0,\n    forced: i\n  }, {\n    find: function find(t) {\n      return a(this, t, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  }), o(\"find\");\n}, function (t, e, n) {\n  t.exports = n(0);\n}, function (t, e, n) {\n  var r = n(1);\n  t.exports = !!Object.getOwnPropertySymbols && !r(function () {\n    return !String(Symbol());\n  });\n}, function (t, e, n) {\n  var r = n(3),\n      a = n(53),\n      o = n(22),\n      i = n(9);\n\n  t.exports = function (t, e) {\n    for (var n = a(e), s = i.f, l = o.f, u = 0; u < n.length; u++) {\n      var c = n[u];\n      r(t, c) || s(t, c, l(e, c));\n    }\n  };\n}, function (t, e, n) {\n  var r = n(1),\n      a = /#|\\.prototype\\./,\n      o = function o(t, e) {\n    var n = s[i(t)];\n    return n == u || n != l && (\"function\" == typeof e ? r(e) : !!e);\n  },\n      i = o.normalize = function (t) {\n    return String(t).replace(a, \".\").toLowerCase();\n  },\n      s = o.data = {},\n      l = o.NATIVE = \"N\",\n      u = o.POLYFILL = \"P\";\n\n  t.exports = o;\n}, function (t, e) {\n  t.exports = function (t) {\n    if (\"function\" != typeof t) throw TypeError(String(t) + \" is not a function\");\n    return t;\n  };\n}, function (t, e, n) {\n  var r = n(1),\n      a = n(2)(\"species\");\n\n  t.exports = function (t) {\n    return !r(function () {\n      var e = [];\n      return (e.constructor = {})[a] = function () {\n        return {\n          foo: 1\n        };\n      }, 1 !== e[t](Boolean).foo;\n    });\n  };\n}, function (t, e, n) {\n  var r = n(2),\n      a = n(35),\n      o = n(6),\n      i = r(\"unscopables\"),\n      s = Array.prototype;\n  null == s[i] && o(s, i, a(null)), t.exports = function (t) {\n    s[i][t] = !0;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(1);\n\n  t.exports = function (t, e) {\n    var n = [][t];\n    return !n || !r(function () {\n      n.call(null, e || function () {\n        throw 1;\n      }, 1);\n    });\n  };\n}, function (t, e, n) {\n  var r = n(32),\n      a = n(29),\n      o = n(43),\n      i = n(8);\n\n  t.exports = r(\"Reflect\", \"ownKeys\") || function (t) {\n    var e = a.f(i(t)),\n        n = o.f;\n    return n ? e.concat(n(t)) : e;\n  };\n}, function (t, e) {\n  var n;\n\n  n = function () {\n    return this;\n  }();\n\n  try {\n    n = n || new Function(\"return this\")();\n  } catch (t) {\n    \"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && (n = window);\n  }\n\n  t.exports = n;\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(21),\n      o = r[\"__core-js_shared__\"] || a(\"__core-js_shared__\", {});\n  t.exports = o;\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(34),\n      o = r.WeakMap;\n  t.exports = \"function\" == typeof o && /native code/.test(a.call(o));\n}, function (t, e, n) {\n  var r = n(49);\n\n  t.exports = function (t, e, n) {\n    if (r(t), void 0 === e) return t;\n\n    switch (n) {\n      case 0:\n        return function () {\n          return t.call(e);\n        };\n\n      case 1:\n        return function (n) {\n          return t.call(e, n);\n        };\n\n      case 2:\n        return function (n, r) {\n          return t.call(e, n, r);\n        };\n\n      case 3:\n        return function (n, r, a) {\n          return t.call(e, n, r, a);\n        };\n    }\n\n    return function () {\n      return t.apply(e, arguments);\n    };\n  };\n},, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(10),\n      a = n(51),\n      o = n(61),\n      i = n(28),\n      s = n(84),\n      l = i.set,\n      u = i.getterFor(\"Array Iterator\");\n  t.exports = s(Array, \"Array\", function (t, e) {\n    l(this, {\n      type: \"Array Iterator\",\n      target: r(t),\n      index: 0,\n      kind: e\n    });\n  }, function () {\n    var t = u(this),\n        e = t.target,\n        n = t.kind,\n        r = t.index++;\n    return !e || r >= e.length ? (t.target = void 0, {\n      value: void 0,\n      done: !0\n    }) : \"keys\" == n ? {\n      value: r,\n      done: !1\n    } : \"values\" == n ? {\n      value: e[r],\n      done: !1\n    } : {\n      value: [r, e[r]],\n      done: !1\n    };\n  }, \"values\"), o.Arguments = o.Array, a(\"keys\"), a(\"values\"), a(\"entries\");\n}, function (t, e, n) {\n  var r = n(9).f,\n      a = n(3),\n      o = n(2)(\"toStringTag\");\n\n  t.exports = function (t, e, n) {\n    t && !a(t = n ? t : t.prototype, o) && r(t, o, {\n      configurable: !0,\n      value: e\n    });\n  };\n}, function (t, e) {\n  t.exports = {};\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r,\n      a,\n      o = n(86),\n      i = RegExp.prototype.exec,\n      s = String.prototype.replace,\n      l = i,\n      u = (r = /a/, a = /b*/g, i.call(r, \"a\"), i.call(a, \"a\"), 0 !== r.lastIndex || 0 !== a.lastIndex),\n      c = void 0 !== /()??/.exec(\"\")[1];\n  (u || c) && (l = function l(t) {\n    var e,\n        n,\n        r,\n        a,\n        l = this;\n    return c && (n = new RegExp(\"^\" + l.source + \"$(?!\\\\s)\", o.call(l))), u && (e = l.lastIndex), r = i.call(l, t), u && r && (l.lastIndex = l.global ? r.index + r[0].length : e), c && r && r.length > 1 && s.call(r[0], n, function () {\n      for (a = 1; a < arguments.length - 2; a++) {\n        void 0 === arguments[a] && (r[a] = void 0);\n      }\n    }), r;\n  }), t.exports = l;\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(9),\n      o = n(8),\n      i = n(41);\n  t.exports = r ? Object.defineProperties : function (t, e) {\n    o(t);\n\n    for (var n, r = i(e), s = r.length, l = 0; s > l;) {\n      a.f(t, n = r[l++], e[n]);\n    }\n\n    return t;\n  };\n}, function (t, e, n) {\n  var r = n(32);\n  t.exports = r(\"document\", \"documentElement\");\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(39).indexOf,\n      o = n(52),\n      i = [].indexOf,\n      s = !!i && 1 / [1].indexOf(1, -0) < 0,\n      l = o(\"indexOf\");\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: s || l\n  }, {\n    indexOf: function indexOf(t) {\n      return s ? i.apply(this, arguments) || 0 : a(this, t, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(20),\n      a = n(9),\n      o = n(18);\n\n  t.exports = function (t, e, n) {\n    var i = r(e);\n    i in t ? a.f(t, i, o(0, n)) : t[i] = n;\n  };\n}, function (t, e) {\n  t.exports = \"\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF\";\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(62);\n  r({\n    target: \"RegExp\",\n    proto: !0,\n    forced: /./.exec !== a\n  }, {\n    exec: a\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(0),\n      o = n(30),\n      i = n(7),\n      s = n(46),\n      l = n(1),\n      u = n(3),\n      c = n(31),\n      f = n(5),\n      d = n(8),\n      h = n(16),\n      p = n(10),\n      g = n(20),\n      v = n(18),\n      b = n(35),\n      y = n(41),\n      m = n(29),\n      S = n(103),\n      x = n(43),\n      D = n(22),\n      w = n(9),\n      _ = n(40),\n      T = n(6),\n      C = n(14),\n      I = n(12),\n      A = n(25),\n      j = n(19),\n      F = n(26),\n      P = n(2),\n      L = n(76),\n      R = n(77),\n      O = n(60),\n      E = n(28),\n      N = n(24).forEach,\n      k = A(\"hidden\"),\n      M = P(\"toPrimitive\"),\n      H = E.set,\n      W = E.getterFor(\"Symbol\"),\n      B = Object.prototype,\n      _U = a.Symbol,\n      V = a.JSON,\n      J = V && V.stringify,\n      X = D.f,\n      G = w.f,\n      $ = S.f,\n      q = _.f,\n      z = I(\"symbols\"),\n      Y = I(\"op-symbols\"),\n      Z = I(\"string-to-symbol-registry\"),\n      Q = I(\"symbol-to-string-registry\"),\n      K = I(\"wks\"),\n      tt = a.QObject,\n      et = !tt || !tt.prototype || !tt.prototype.findChild,\n      nt = i && l(function () {\n    return 7 != b(G({}, \"a\", {\n      get: function get() {\n        return G(this, \"a\", {\n          value: 7\n        }).a;\n      }\n    })).a;\n  }) ? function (t, e, n) {\n    var r = X(B, e);\n    r && delete B[e], G(t, e, n), r && t !== B && G(B, e, r);\n  } : G,\n      rt = function rt(t, e) {\n    var n = z[t] = b(_U.prototype);\n    return H(n, {\n      type: \"Symbol\",\n      tag: t,\n      description: e\n    }), i || (n.description = e), n;\n  },\n      at = s && \"symbol\" == _typeof(_U.iterator) ? function (t) {\n    return \"symbol\" == _typeof(t);\n  } : function (t) {\n    return Object(t) instanceof _U;\n  },\n      ot = function ot(t, e, n) {\n    t === B && ot(Y, e, n), d(t);\n    var r = g(e, !0);\n    return d(n), u(z, r) ? (n.enumerable ? (u(t, k) && t[k][r] && (t[k][r] = !1), n = b(n, {\n      enumerable: v(0, !1)\n    })) : (u(t, k) || G(t, k, v(1, {})), t[k][r] = !0), nt(t, r, n)) : G(t, r, n);\n  },\n      it = function it(t, e) {\n    d(t);\n    var n = p(e),\n        r = y(n).concat(ct(n));\n    return N(r, function (e) {\n      i && !st.call(n, e) || ot(t, e, n[e]);\n    }), t;\n  },\n      st = function st(t) {\n    var e = g(t, !0),\n        n = q.call(this, e);\n    return !(this === B && u(z, e) && !u(Y, e)) && (!(n || !u(this, e) || !u(z, e) || u(this, k) && this[k][e]) || n);\n  },\n      lt = function lt(t, e) {\n    var n = p(t),\n        r = g(e, !0);\n\n    if (n !== B || !u(z, r) || u(Y, r)) {\n      var a = X(n, r);\n      return !a || !u(z, r) || u(n, k) && n[k][r] || (a.enumerable = !0), a;\n    }\n  },\n      ut = function ut(t) {\n    var e = $(p(t)),\n        n = [];\n    return N(e, function (t) {\n      u(z, t) || u(j, t) || n.push(t);\n    }), n;\n  },\n      ct = function ct(t) {\n    var e = t === B,\n        n = $(e ? Y : p(t)),\n        r = [];\n    return N(n, function (t) {\n      !u(z, t) || e && !u(B, t) || r.push(z[t]);\n    }), r;\n  };\n\n  s || (C((_U = function U() {\n    if (this instanceof _U) throw TypeError(\"Symbol is not a constructor\");\n\n    var t = arguments.length && void 0 !== arguments[0] ? String(arguments[0]) : void 0,\n        e = F(t),\n        n = function n(t) {\n      this === B && n.call(Y, t), u(this, k) && u(this[k], e) && (this[k][e] = !1), nt(this, e, v(1, t));\n    };\n\n    return i && et && nt(B, e, {\n      configurable: !0,\n      set: n\n    }), rt(e, t);\n  }).prototype, \"toString\", function () {\n    return W(this).tag;\n  }), _.f = st, w.f = ot, D.f = lt, m.f = S.f = ut, x.f = ct, i && (G(_U.prototype, \"description\", {\n    configurable: !0,\n    get: function get() {\n      return W(this).description;\n    }\n  }), o || C(B, \"propertyIsEnumerable\", st, {\n    unsafe: !0\n  })), L.f = function (t) {\n    return rt(P(t), t);\n  }), r({\n    global: !0,\n    wrap: !0,\n    forced: !s,\n    sham: !s\n  }, {\n    Symbol: _U\n  }), N(y(K), function (t) {\n    R(t);\n  }), r({\n    target: \"Symbol\",\n    stat: !0,\n    forced: !s\n  }, {\n    \"for\": function _for(t) {\n      var e = String(t);\n      if (u(Z, e)) return Z[e];\n\n      var n = _U(e);\n\n      return Z[e] = n, Q[n] = e, n;\n    },\n    keyFor: function keyFor(t) {\n      if (!at(t)) throw TypeError(t + \" is not a symbol\");\n      if (u(Q, t)) return Q[t];\n    },\n    useSetter: function useSetter() {\n      et = !0;\n    },\n    useSimple: function useSimple() {\n      et = !1;\n    }\n  }), r({\n    target: \"Object\",\n    stat: !0,\n    forced: !s,\n    sham: !i\n  }, {\n    create: function create(t, e) {\n      return void 0 === e ? b(t) : it(b(t), e);\n    },\n    defineProperty: ot,\n    defineProperties: it,\n    getOwnPropertyDescriptor: lt\n  }), r({\n    target: \"Object\",\n    stat: !0,\n    forced: !s\n  }, {\n    getOwnPropertyNames: ut,\n    getOwnPropertySymbols: ct\n  }), r({\n    target: \"Object\",\n    stat: !0,\n    forced: l(function () {\n      x.f(1);\n    })\n  }, {\n    getOwnPropertySymbols: function getOwnPropertySymbols(t) {\n      return x.f(h(t));\n    }\n  }), V && r({\n    target: \"JSON\",\n    stat: !0,\n    forced: !s || l(function () {\n      var t = _U();\n\n      return \"[null]\" != J([t]) || \"{}\" != J({\n        a: t\n      }) || \"{}\" != J(Object(t));\n    })\n  }, {\n    stringify: function stringify(t) {\n      for (var e, n, r = [t], a = 1; arguments.length > a;) {\n        r.push(arguments[a++]);\n      }\n\n      if (n = e = r[1], (f(e) || void 0 !== t) && !at(t)) return c(e) || (e = function e(t, _e2) {\n        if (\"function\" == typeof n && (_e2 = n.call(this, t, _e2)), !at(_e2)) return _e2;\n      }), r[1] = e, J.apply(V, r);\n    }\n  }), _U.prototype[M] || T(_U.prototype, M, _U.prototype.valueOf), O(_U, \"Symbol\"), j[k] = !0;\n}, function (t, e, n) {\n  var r = n(14),\n      a = n(104),\n      o = Object.prototype;\n  a !== o.toString && r(o, \"toString\", a, {\n    unsafe: !0\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(7),\n      o = n(0),\n      i = n(3),\n      s = n(5),\n      l = n(9).f,\n      u = n(47),\n      c = o.Symbol;\n\n  if (a && \"function\" == typeof c && (!(\"description\" in c.prototype) || void 0 !== c().description)) {\n    var f = {},\n        d = function d() {\n      var t = arguments.length < 1 || void 0 === arguments[0] ? void 0 : String(arguments[0]),\n          e = this instanceof d ? new c(t) : void 0 === t ? c() : c(t);\n      return \"\" === t && (f[e] = !0), e;\n    };\n\n    u(d, c);\n    var h = d.prototype = c.prototype;\n    h.constructor = d;\n    var p = h.toString,\n        g = \"Symbol(test)\" == String(c(\"test\")),\n        v = /^Symbol\\((.*)\\)[^)]+$/;\n    l(h, \"description\", {\n      configurable: !0,\n      get: function get() {\n        var t = s(this) ? this.valueOf() : this,\n            e = p.call(t);\n        if (i(f, t)) return \"\";\n        var n = g ? e.slice(7, -1) : e.replace(v, \"$1\");\n        return \"\" === n ? void 0 : n;\n      }\n    }), r({\n      global: !0,\n      forced: !0\n    }, {\n      Symbol: d\n    });\n  }\n}, function (t, e, n) {\n  n(77)(\"iterator\");\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(79).charAt,\n      a = n(28),\n      o = n(84),\n      i = a.set,\n      s = a.getterFor(\"String Iterator\");\n  o(String, \"String\", function (t) {\n    i(this, {\n      type: \"String Iterator\",\n      string: String(t),\n      index: 0\n    });\n  }, function () {\n    var t,\n        e = s(this),\n        n = e.string,\n        a = e.index;\n    return a >= n.length ? {\n      value: void 0,\n      done: !0\n    } : (t = r(n, a), e.index += t.length, {\n      value: t,\n      done: !1\n    });\n  });\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(89),\n      o = n(59),\n      i = n(6),\n      s = n(2),\n      l = s(\"iterator\"),\n      u = s(\"toStringTag\"),\n      c = o.values;\n\n  for (var f in a) {\n    var d = r[f],\n        h = d && d.prototype;\n\n    if (h) {\n      if (h[l] !== c) try {\n        i(h, l, c);\n      } catch (t) {\n        h[l] = c;\n      }\n      if (h[u] || i(h, u, f), a[f]) for (var p in o) {\n        if (h[p] !== o[p]) try {\n          i(h, p, o[p]);\n        } catch (t) {\n          h[p] = o[p];\n        }\n      }\n    }\n  }\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(1),\n      o = n(31),\n      i = n(5),\n      s = n(16),\n      l = n(11),\n      u = n(66),\n      c = n(42),\n      f = n(50),\n      d = n(2)(\"isConcatSpreadable\"),\n      h = !a(function () {\n    var t = [];\n    return t[d] = !1, t.concat()[0] !== t;\n  }),\n      p = f(\"concat\"),\n      g = function g(t) {\n    if (!i(t)) return !1;\n    var e = t[d];\n    return void 0 !== e ? !!e : o(t);\n  };\n\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: !h || !p\n  }, {\n    concat: function concat(t) {\n      var e,\n          n,\n          r,\n          a,\n          o,\n          i = s(this),\n          f = c(i, 0),\n          d = 0;\n\n      for (e = -1, r = arguments.length; e < r; e++) {\n        if (o = -1 === e ? i : arguments[e], g(o)) {\n          if (d + (a = l(o.length)) > 9007199254740991) throw TypeError(\"Maximum allowed index exceeded\");\n\n          for (n = 0; n < a; n++, d++) {\n            n in o && u(f, d, o[n]);\n          }\n        } else {\n          if (d >= 9007199254740991) throw TypeError(\"Maximum allowed index exceeded\");\n          u(f, d++, o);\n        }\n      }\n\n      return f.length = d, f;\n    }\n  });\n}, function (t, e, n) {\n  e.f = n(2);\n}, function (t, e, n) {\n  var r = n(45),\n      a = n(3),\n      o = n(76),\n      i = n(9).f;\n\n  t.exports = function (t) {\n    var e = r.Symbol || (r.Symbol = {});\n    a(e, t) || i(e, t, {\n      value: o.f(t)\n    });\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(27),\n      o = n(10),\n      i = n(52),\n      s = [].join,\n      l = a != Object,\n      u = i(\"join\", \",\");\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: l || u\n  }, {\n    join: function join(t) {\n      return s.call(o(this), void 0 === t ? \",\" : t);\n    }\n  });\n}, function (t, e, n) {\n  var r = n(15),\n      a = n(13),\n      o = function o(t) {\n    return function (e, n) {\n      var o,\n          i,\n          s = String(a(e)),\n          l = r(n),\n          u = s.length;\n      return l < 0 || l >= u ? t ? \"\" : void 0 : (o = s.charCodeAt(l)) < 55296 || o > 56319 || l + 1 === u || (i = s.charCodeAt(l + 1)) < 56320 || i > 57343 ? t ? s.charAt(l) : o : t ? s.slice(l, l + 2) : i - 56320 + (o - 55296 << 10) + 65536;\n    };\n  };\n\n  t.exports = {\n    codeAt: o(!1),\n    charAt: o(!0)\n  };\n}, function (t, e, n) {\n  var r = n(13),\n      a = \"[\" + n(67) + \"]\",\n      o = RegExp(\"^\" + a + a + \"*\"),\n      i = RegExp(a + a + \"*$\"),\n      s = function s(t) {\n    return function (e) {\n      var n = String(r(e));\n      return 1 & t && (n = n.replace(o, \"\")), 2 & t && (n = n.replace(i, \"\")), n;\n    };\n  };\n\n  t.exports = {\n    start: s(1),\n    end: s(2),\n    trim: s(3)\n  };\n}, function (t, e, n) {\n  var r = n(3),\n      a = n(16),\n      o = n(25),\n      i = n(108),\n      s = o(\"IE_PROTO\"),\n      l = Object.prototype;\n  t.exports = i ? Object.getPrototypeOf : function (t) {\n    return t = a(t), r(t, s) ? t[s] : \"function\" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? l : null;\n  };\n}, function (t, e, n) {\n  var r = n(8),\n      a = n(96);\n  t.exports = Object.setPrototypeOf || (\"__proto__\" in {} ? function () {\n    var t,\n        e = !1,\n        n = {};\n\n    try {\n      (t = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set).call(n, []), e = n instanceof Array;\n    } catch (t) {}\n\n    return function (n, o) {\n      return r(n), a(o), e ? t.call(n, o) : n.__proto__ = o, n;\n    };\n  }() : void 0);\n}, function (t, e) {\n  (function (e) {\n    t.exports = e;\n  }).call(this, {});\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(107),\n      o = n(81),\n      i = n(82),\n      s = n(60),\n      l = n(6),\n      u = n(14),\n      c = n(2),\n      f = n(30),\n      d = n(61),\n      h = n(85),\n      p = h.IteratorPrototype,\n      g = h.BUGGY_SAFARI_ITERATORS,\n      v = c(\"iterator\"),\n      b = function b() {\n    return this;\n  };\n\n  t.exports = function (t, e, n, c, h, y, m) {\n    a(n, e, c);\n\n    var S,\n        x,\n        D,\n        w = function w(t) {\n      if (t === h && A) return A;\n      if (!g && t in C) return C[t];\n\n      switch (t) {\n        case \"keys\":\n        case \"values\":\n        case \"entries\":\n          return function () {\n            return new n(this, t);\n          };\n      }\n\n      return function () {\n        return new n(this);\n      };\n    },\n        _ = e + \" Iterator\",\n        T = !1,\n        C = t.prototype,\n        I = C[v] || C[\"@@iterator\"] || h && C[h],\n        A = !g && I || w(h),\n        j = \"Array\" == e && C.entries || I;\n\n    if (j && (S = o(j.call(new t())), p !== Object.prototype && S.next && (f || o(S) === p || (i ? i(S, p) : \"function\" != typeof S[v] && l(S, v, b)), s(S, _, !0, !0), f && (d[_] = b))), \"values\" == h && I && \"values\" !== I.name && (T = !0, A = function A() {\n      return I.call(this);\n    }), f && !m || C[v] === A || l(C, v, A), d[e] = A, h) if (x = {\n      values: w(\"values\"),\n      keys: y ? A : w(\"keys\"),\n      entries: w(\"entries\")\n    }, m) for (D in x) {\n      !g && !T && D in C || u(C, D, x[D]);\n    } else r({\n      target: e,\n      proto: !0,\n      forced: g || T\n    }, x);\n    return x;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r,\n      a,\n      o,\n      i = n(81),\n      s = n(6),\n      l = n(3),\n      u = n(2),\n      c = n(30),\n      f = u(\"iterator\"),\n      d = !1;\n  [].keys && (\"next\" in (o = [].keys()) ? (a = i(i(o))) !== Object.prototype && (r = a) : d = !0), null == r && (r = {}), c || l(r, f) || s(r, f, function () {\n    return this;\n  }), t.exports = {\n    IteratorPrototype: r,\n    BUGGY_SAFARI_ITERATORS: d\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(8);\n\n  t.exports = function () {\n    var t = r(this),\n        e = \"\";\n    return t.global && (e += \"g\"), t.ignoreCase && (e += \"i\"), t.multiline && (e += \"m\"), t.dotAll && (e += \"s\"), t.unicode && (e += \"u\"), t.sticky && (e += \"y\"), e;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(6),\n      a = n(14),\n      o = n(1),\n      i = n(2),\n      s = n(62),\n      l = i(\"species\"),\n      u = !o(function () {\n    var t = /./;\n    return t.exec = function () {\n      var t = [];\n      return t.groups = {\n        a: \"7\"\n      }, t;\n    }, \"7\" !== \"\".replace(t, \"$<a>\");\n  }),\n      c = !o(function () {\n    var t = /(?:)/,\n        e = t.exec;\n\n    t.exec = function () {\n      return e.apply(this, arguments);\n    };\n\n    var n = \"ab\".split(t);\n    return 2 !== n.length || \"a\" !== n[0] || \"b\" !== n[1];\n  });\n\n  t.exports = function (t, e, n, f) {\n    var d = i(t),\n        h = !o(function () {\n      var e = {};\n      return e[d] = function () {\n        return 7;\n      }, 7 != \"\"[t](e);\n    }),\n        p = h && !o(function () {\n      var e = !1,\n          n = /a/;\n      return n.exec = function () {\n        return e = !0, null;\n      }, \"split\" === t && (n.constructor = {}, n.constructor[l] = function () {\n        return n;\n      }), n[d](\"\"), !e;\n    });\n\n    if (!h || !p || \"replace\" === t && !u || \"split\" === t && !c) {\n      var g = /./[d],\n          v = n(d, \"\"[t], function (t, e, n, r, a) {\n        return e.exec === s ? h && !a ? {\n          done: !0,\n          value: g.call(e, n, r)\n        } : {\n          done: !0,\n          value: t.call(n, e, r)\n        } : {\n          done: !1\n        };\n      }),\n          b = v[0],\n          y = v[1];\n      a(String.prototype, t, b), a(RegExp.prototype, d, 2 == e ? function (t, e) {\n        return y.call(t, this, e);\n      } : function (t) {\n        return y.call(t, this);\n      }), f && r(RegExp.prototype[d], \"sham\", !0);\n    }\n  };\n}, function (t, e, n) {\n  var r = n(17),\n      a = n(62);\n\n  t.exports = function (t, e) {\n    var n = t.exec;\n\n    if (\"function\" == typeof n) {\n      var o = n.call(t, e);\n      if (\"object\" != _typeof(o)) throw TypeError(\"RegExp exec method returned something other than an Object or null\");\n      return o;\n    }\n\n    if (\"RegExp\" !== r(t)) throw TypeError(\"RegExp#exec called on incompatible receiver\");\n    return a.call(t, e);\n  };\n}, function (t, e) {\n  t.exports = {\n    CSSRuleList: 0,\n    CSSStyleDeclaration: 0,\n    CSSValueList: 0,\n    ClientRectList: 0,\n    DOMRectList: 0,\n    DOMStringList: 0,\n    DOMTokenList: 1,\n    DataTransferItemList: 0,\n    FileList: 0,\n    HTMLAllCollection: 0,\n    HTMLCollection: 0,\n    HTMLFormElement: 0,\n    HTMLSelectElement: 0,\n    MediaList: 0,\n    MimeTypeArray: 0,\n    NamedNodeMap: 0,\n    NodeList: 1,\n    PaintRequestList: 0,\n    Plugin: 0,\n    PluginArray: 0,\n    SVGLengthList: 0,\n    SVGNumberList: 0,\n    SVGPathSegList: 0,\n    SVGPointList: 0,\n    SVGStringList: 0,\n    SVGTransformList: 0,\n    SourceBufferList: 0,\n    StyleSheetList: 0,\n    TextTrackCueList: 0,\n    TextTrackList: 0,\n    TouchList: 0\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(87),\n      a = n(8),\n      o = n(16),\n      i = n(11),\n      s = n(15),\n      l = n(13),\n      u = n(92),\n      c = n(88),\n      f = Math.max,\n      d = Math.min,\n      h = Math.floor,\n      p = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g,\n      g = /\\$([$&'`]|\\d\\d?)/g;\n  r(\"replace\", 2, function (t, e, n) {\n    return [function (n, r) {\n      var a = l(this),\n          o = null == n ? void 0 : n[t];\n      return void 0 !== o ? o.call(n, a, r) : e.call(String(a), n, r);\n    }, function (t, o) {\n      var l = n(e, t, this, o);\n      if (l.done) return l.value;\n      var h = a(t),\n          p = String(this),\n          g = \"function\" == typeof o;\n      g || (o = String(o));\n      var v = h.global;\n\n      if (v) {\n        var b = h.unicode;\n        h.lastIndex = 0;\n      }\n\n      for (var y = [];;) {\n        var m = c(h, p);\n        if (null === m) break;\n        if (y.push(m), !v) break;\n        \"\" === String(m[0]) && (h.lastIndex = u(p, i(h.lastIndex), b));\n      }\n\n      for (var S, x = \"\", D = 0, w = 0; w < y.length; w++) {\n        m = y[w];\n\n        for (var _ = String(m[0]), T = f(d(s(m.index), p.length), 0), C = [], I = 1; I < m.length; I++) {\n          C.push(void 0 === (S = m[I]) ? S : String(S));\n        }\n\n        var A = m.groups;\n\n        if (g) {\n          var j = [_].concat(C, T, p);\n          void 0 !== A && j.push(A);\n          var F = String(o.apply(void 0, j));\n        } else F = r(_, p, T, C, A, o);\n\n        T >= D && (x += p.slice(D, T) + F, D = T + _.length);\n      }\n\n      return x + p.slice(D);\n    }];\n\n    function r(t, n, r, a, i, s) {\n      var l = r + t.length,\n          u = a.length,\n          c = g;\n      return void 0 !== i && (i = o(i), c = p), e.call(s, c, function (e, o) {\n        var s;\n\n        switch (o.charAt(0)) {\n          case \"$\":\n            return \"$\";\n\n          case \"&\":\n            return t;\n\n          case \"`\":\n            return n.slice(0, r);\n\n          case \"'\":\n            return n.slice(l);\n\n          case \"<\":\n            s = i[o.slice(1, -1)];\n            break;\n\n          default:\n            var c = +o;\n            if (0 === c) return e;\n\n            if (c > u) {\n              var f = h(c / 10);\n              return 0 === f ? e : f <= u ? void 0 === a[f - 1] ? o.charAt(1) : a[f - 1] + o.charAt(1) : e;\n            }\n\n            s = a[c - 1];\n        }\n\n        return void 0 === s ? \"\" : s;\n      });\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(24).filter;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: !n(50)(\"filter\")\n  }, {\n    filter: function filter(t) {\n      return a(this, t, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(79).charAt;\n\n  t.exports = function (t, e, n) {\n    return e + (n ? r(t, e).length : 1);\n  };\n}, function (t, e, n) {\n  var r = n(17),\n      a = n(2)(\"toStringTag\"),\n      o = \"Arguments\" == r(function () {\n    return arguments;\n  }());\n\n  t.exports = function (t) {\n    var e, n, i;\n    return void 0 === t ? \"Undefined\" : null === t ? \"Null\" : \"string\" == typeof (n = function (t, e) {\n      try {\n        return t[e];\n      } catch (t) {}\n    }(e = Object(t), a)) ? n : o ? r(e) : \"Object\" == (i = r(e)) && \"function\" == typeof e.callee ? \"Arguments\" : i;\n  };\n}, function (t, e, n) {\n  var r = n(14),\n      a = Date.prototype,\n      o = a.toString,\n      i = a.getTime;\n  new Date(NaN) + \"\" != \"Invalid Date\" && r(a, \"toString\", function () {\n    var t = i.call(this);\n    return t == t ? o.call(this) : \"Invalid Date\";\n  });\n}, function (t, e) {\n  t.exports = function (t) {\n    if (!t.webpackPolyfill) {\n      var e = Object.create(t);\n      e.children || (e.children = []), Object.defineProperty(e, \"loaded\", {\n        enumerable: !0,\n        get: function get() {\n          return e.l;\n        }\n      }), Object.defineProperty(e, \"id\", {\n        enumerable: !0,\n        get: function get() {\n          return e.i;\n        }\n      }), Object.defineProperty(e, \"exports\", {\n        enumerable: !0\n      }), e.webpackPolyfill = 1;\n    }\n\n    return e;\n  };\n}, function (t, e, n) {\n  var r = n(5);\n\n  t.exports = function (t) {\n    if (!r(t) && null !== t) throw TypeError(\"Can't set \" + String(t) + \" as a prototype\");\n    return t;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(24).map;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: !n(50)(\"map\")\n  }, {\n    map: function map(t) {\n      return a(this, t, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(87),\n      a = n(99),\n      o = n(8),\n      i = n(13),\n      s = n(105),\n      l = n(92),\n      u = n(11),\n      c = n(88),\n      f = n(62),\n      d = n(1),\n      h = [].push,\n      p = Math.min,\n      g = !d(function () {\n    return !RegExp(4294967295, \"y\");\n  });\n  r(\"split\", 2, function (t, e, n) {\n    var r;\n    return r = \"c\" == \"abbc\".split(/(b)*/)[1] || 4 != \"test\".split(/(?:)/, -1).length || 2 != \"ab\".split(/(?:ab)*/).length || 4 != \".\".split(/(.?)(.?)/).length || \".\".split(/()()/).length > 1 || \"\".split(/.?/).length ? function (t, n) {\n      var r = String(i(this)),\n          o = void 0 === n ? 4294967295 : n >>> 0;\n      if (0 === o) return [];\n      if (void 0 === t) return [r];\n      if (!a(t)) return e.call(r, t, o);\n\n      for (var s, l, u, c = [], d = (t.ignoreCase ? \"i\" : \"\") + (t.multiline ? \"m\" : \"\") + (t.unicode ? \"u\" : \"\") + (t.sticky ? \"y\" : \"\"), p = 0, g = new RegExp(t.source, d + \"g\"); (s = f.call(g, r)) && !((l = g.lastIndex) > p && (c.push(r.slice(p, s.index)), s.length > 1 && s.index < r.length && h.apply(c, s.slice(1)), u = s[0].length, p = l, c.length >= o));) {\n        g.lastIndex === s.index && g.lastIndex++;\n      }\n\n      return p === r.length ? !u && g.test(\"\") || c.push(\"\") : c.push(r.slice(p)), c.length > o ? c.slice(0, o) : c;\n    } : \"0\".split(void 0, 0).length ? function (t, n) {\n      return void 0 === t && 0 === n ? [] : e.call(this, t, n);\n    } : e, [function (e, n) {\n      var a = i(this),\n          o = null == e ? void 0 : e[t];\n      return void 0 !== o ? o.call(e, a, n) : r.call(String(a), e, n);\n    }, function (t, a) {\n      var i = n(r, t, this, a, r !== e);\n      if (i.done) return i.value;\n      var f = o(t),\n          d = String(this),\n          h = s(f, RegExp),\n          v = f.unicode,\n          b = (f.ignoreCase ? \"i\" : \"\") + (f.multiline ? \"m\" : \"\") + (f.unicode ? \"u\" : \"\") + (g ? \"y\" : \"g\"),\n          y = new h(g ? f : \"^(?:\" + f.source + \")\", b),\n          m = void 0 === a ? 4294967295 : a >>> 0;\n      if (0 === m) return [];\n      if (0 === d.length) return null === c(y, d) ? [d] : [];\n\n      for (var S = 0, x = 0, D = []; x < d.length;) {\n        y.lastIndex = g ? x : 0;\n\n        var w,\n            _ = c(y, g ? d : d.slice(x));\n\n        if (null === _ || (w = p(u(y.lastIndex + (g ? 0 : x)), d.length)) === S) x = l(d, x, v);else {\n          if (D.push(d.slice(S, x)), D.length === m) return D;\n\n          for (var T = 1; T <= _.length - 1; T++) {\n            if (D.push(_[T]), D.length === m) return D;\n          }\n\n          x = S = w;\n        }\n      }\n\n      return D.push(d.slice(S)), D;\n    }];\n  }, !g);\n}, function (t, e, n) {\n  var r = n(5),\n      a = n(17),\n      o = n(2)(\"match\");\n\n  t.exports = function (t) {\n    var e;\n    return r(t) && (void 0 !== (e = t[o]) ? !!e : \"RegExp\" == a(t));\n  };\n},, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(5),\n      o = n(31),\n      i = n(38),\n      s = n(11),\n      l = n(10),\n      u = n(66),\n      c = n(50),\n      f = n(2)(\"species\"),\n      d = [].slice,\n      h = Math.max;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: !c(\"slice\")\n  }, {\n    slice: function slice(t, e) {\n      var n,\n          r,\n          c,\n          p = l(this),\n          g = s(p.length),\n          v = i(t, g),\n          b = i(void 0 === e ? g : e, g);\n      if (o(p) && (\"function\" != typeof (n = p.constructor) || n !== Array && !o(n.prototype) ? a(n) && null === (n = n[f]) && (n = void 0) : n = void 0, n === Array || void 0 === n)) return d.call(p, v, b);\n\n      for (r = new (void 0 === n ? Array : n)(h(b - v, 0)), c = 0; v < b; v++, c++) {\n        v in p && u(r, c, p[v]);\n      }\n\n      return r.length = c, r;\n    }\n  });\n},, function (t, e, n) {\n  var r = n(10),\n      a = n(29).f,\n      o = {}.toString,\n      i = \"object\" == (typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];\n\n  t.exports.f = function (t) {\n    return i && \"[object Window]\" == o.call(t) ? function (t) {\n      try {\n        return a(t);\n      } catch (t) {\n        return i.slice();\n      }\n    }(t) : a(r(t));\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(93),\n      a = {};\n  a[n(2)(\"toStringTag\")] = \"z\", t.exports = \"[object z]\" !== String(a) ? function () {\n    return \"[object \" + r(this) + \"]\";\n  } : a.toString;\n}, function (t, e, n) {\n  var r = n(8),\n      a = n(49),\n      o = n(2)(\"species\");\n\n  t.exports = function (t, e) {\n    var n,\n        i = r(t).constructor;\n    return void 0 === i || null == (n = r(i)[o]) ? e : a(n);\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(14),\n      a = n(8),\n      o = n(1),\n      i = n(86),\n      s = RegExp.prototype,\n      l = s.toString,\n      u = o(function () {\n    return \"/a/b\" != l.call({\n      source: \"a\",\n      flags: \"b\"\n    });\n  }),\n      c = \"toString\" != l.name;\n  (u || c) && r(RegExp.prototype, \"toString\", function () {\n    var t = a(this),\n        e = String(t.source),\n        n = t.flags;\n    return \"/\" + e + \"/\" + String(void 0 === n && t instanceof RegExp && !(\"flags\" in s) ? i.call(t) : n);\n  }, {\n    unsafe: !0\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(85).IteratorPrototype,\n      a = n(35),\n      o = n(18),\n      i = n(60),\n      s = n(61),\n      l = function l() {\n    return this;\n  };\n\n  t.exports = function (t, e, n) {\n    var u = e + \" Iterator\";\n    return t.prototype = a(r, {\n      next: o(1, n)\n    }), i(t, u, !1, !0), s[u] = l, t;\n  };\n}, function (t, e, n) {\n  var r = n(1);\n  t.exports = !r(function () {\n    function t() {}\n\n    return t.prototype.constructor = null, Object.getPrototypeOf(new t()) !== t.prototype;\n  });\n},, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(38),\n      o = n(15),\n      i = n(11),\n      s = n(16),\n      l = n(42),\n      u = n(66),\n      c = n(50),\n      f = Math.max,\n      d = Math.min;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: !c(\"splice\")\n  }, {\n    splice: function splice(t, e) {\n      var n,\n          r,\n          c,\n          h,\n          p,\n          g,\n          v = s(this),\n          b = i(v.length),\n          y = a(t, b),\n          m = arguments.length;\n      if (0 === m ? n = r = 0 : 1 === m ? (n = 0, r = b - y) : (n = m - 2, r = d(f(o(e), 0), b - y)), b + n - r > 9007199254740991) throw TypeError(\"Maximum allowed length exceeded\");\n\n      for (c = l(v, r), h = 0; h < r; h++) {\n        (p = y + h) in v && u(c, h, v[p]);\n      }\n\n      if (c.length = r, n < r) {\n        for (h = y; h < b - r; h++) {\n          g = h + n, (p = h + r) in v ? v[g] = v[p] : delete v[g];\n        }\n\n        for (h = b; h > b - r + n; h--) {\n          delete v[h - 1];\n        }\n      } else if (n > r) for (h = b - r; h > y; h--) {\n        g = h + n - 1, (p = h + r - 1) in v ? v[g] = v[p] : delete v[g];\n      }\n\n      for (h = 0; h < n; h++) {\n        v[h + y] = arguments[h + 2];\n      }\n\n      return v.length = b - r + n, c;\n    }\n  });\n},,, function (t, e, n) {\n  var r = n(4),\n      a = n(121);\n  r({\n    global: !0,\n    forced: parseFloat != a\n  }, {\n    parseFloat: a\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(80).trim;\n  r({\n    target: \"String\",\n    proto: !0,\n    forced: n(122)(\"trim\")\n  }, {\n    trim: function trim() {\n      return a(this);\n    }\n  });\n}, function (t, e, n) {\n  var r = n(5),\n      a = n(82);\n\n  t.exports = function (t, e, n) {\n    var o, i;\n    return a && \"function\" == typeof (o = e.constructor) && o !== n && r(i = o.prototype) && i !== n.prototype && a(t, i), t;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(87),\n      a = n(8),\n      o = n(11),\n      i = n(13),\n      s = n(92),\n      l = n(88);\n  r(\"match\", 1, function (t, e, n) {\n    return [function (e) {\n      var n = i(this),\n          r = null == e ? void 0 : e[t];\n      return void 0 !== r ? r.call(e, n) : new RegExp(e)[t](String(n));\n    }, function (t) {\n      var r = n(e, t, this);\n      if (r.done) return r.value;\n      var i = a(t),\n          u = String(this);\n      if (!i.global) return l(i, u);\n      var c = i.unicode;\n      i.lastIndex = 0;\n\n      for (var f, d = [], h = 0; null !== (f = l(i, u));) {\n        var p = String(f[0]);\n        d[h] = p, \"\" === p && (i.lastIndex = s(u, o(i.lastIndex), c)), h++;\n      }\n\n      return 0 === h ? null : d;\n    }];\n  });\n},, function (t, e) {\n  t.exports = jQuery;\n},,, function (t, e, n) {\n  var r = n(0),\n      a = n(80).trim,\n      o = n(67),\n      i = r.parseFloat,\n      s = 1 / i(o + \"-0\") != -1 / 0;\n  t.exports = s ? function (t) {\n    var e = a(String(t)),\n        n = i(e);\n    return 0 === n && \"-\" == e.charAt(0) ? -0 : n;\n  } : i;\n}, function (t, e, n) {\n  var r = n(1),\n      a = n(67);\n\n  t.exports = function (t) {\n    return r(function () {\n      return !!a[t]() || \"​᠎\" != \"​᠎\"[t]() || a[t].name !== t;\n    });\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(9).f,\n      o = Function.prototype,\n      i = o.toString,\n      s = /^\\s*function ([^ (]*)/;\n  !r || \"name\" in o || a(o, \"name\", {\n    configurable: !0,\n    get: function get() {\n      try {\n        return i.call(this).match(s)[1];\n      } catch (t) {\n        return \"\";\n      }\n    }\n  });\n},,,, function (t, e, n) {\n  var r = n(4),\n      a = n(140);\n  r({\n    global: !0,\n    forced: parseInt != a\n  }, {\n    parseInt: a\n  });\n}, function (t, e, n) {\n  var r = n(49),\n      a = n(16),\n      o = n(27),\n      i = n(11),\n      s = function s(t) {\n    return function (e, n, s, l) {\n      r(n);\n      var u = a(e),\n          c = o(u),\n          f = i(u.length),\n          d = t ? f - 1 : 0,\n          h = t ? -1 : 1;\n      if (s < 2) for (;;) {\n        if (d in c) {\n          l = c[d], d += h;\n          break;\n        }\n\n        if (d += h, t ? d < 0 : f <= d) throw TypeError(\"Reduce of empty array with no initial value\");\n      }\n\n      for (; t ? d >= 0 : f > d; d += h) {\n        d in c && (l = n(l, c[d], d, u));\n      }\n\n      return l;\n    };\n  };\n\n  t.exports = {\n    left: s(!1),\n    right: s(!0)\n  };\n}, function (t, e, n) {\n  var r = n(7),\n      a = n(0),\n      o = n(48),\n      i = n(115),\n      s = n(9).f,\n      l = n(29).f,\n      u = n(99),\n      c = n(86),\n      f = n(14),\n      d = n(1),\n      h = n(130),\n      p = n(2)(\"match\"),\n      g = a.RegExp,\n      v = g.prototype,\n      b = /a/g,\n      y = /a/g,\n      m = new g(b) !== b;\n\n  if (r && o(\"RegExp\", !m || d(function () {\n    return y[p] = !1, g(b) != b || g(y) == y || \"/a/i\" != g(b, \"i\");\n  }))) {\n    for (var S = function S(t, e) {\n      var n = this instanceof S,\n          r = u(t),\n          a = void 0 === e;\n      return !n && r && t.constructor === S && a ? t : i(m ? new g(r && !a ? t.source : t, e) : g((r = t instanceof S) ? t.source : t, r && a ? c.call(t) : e), n ? this : v, S);\n    }, x = function x(t) {\n      (t in S) || s(S, t, {\n        configurable: !0,\n        get: function get() {\n          return g[t];\n        },\n        set: function set(e) {\n          g[t] = e;\n        }\n      });\n    }, D = l(g), w = 0; D.length > w;) {\n      x(D[w++]);\n    }\n\n    v.constructor = S, S.prototype = v, f(a, \"RegExp\", S);\n  }\n\n  h(\"RegExp\");\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(32),\n      a = n(9),\n      o = n(2),\n      i = n(7),\n      s = o(\"species\");\n\n  t.exports = function (t) {\n    var e = r(t),\n        n = a.f;\n    i && e && !e[s] && n(e, s, {\n      configurable: !0,\n      get: function get() {\n        return this;\n      }\n    });\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(49),\n      o = n(16),\n      i = n(1),\n      s = n(52),\n      l = [].sort,\n      u = [1, 2, 3],\n      c = i(function () {\n    u.sort(void 0);\n  }),\n      f = i(function () {\n    u.sort(null);\n  }),\n      d = s(\"sort\");\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: c || !f || d\n  }, {\n    sort: function sort(t) {\n      return void 0 === t ? l.call(o(this)) : l.call(o(this), a(t));\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(10),\n      a = n(15),\n      o = n(11),\n      i = n(52),\n      s = Math.min,\n      l = [].lastIndexOf,\n      u = !!l && 1 / [1].lastIndexOf(1, -0) < 0,\n      c = i(\"lastIndexOf\");\n  t.exports = u || c ? function (t) {\n    if (u) return l.apply(this, arguments) || 0;\n    var e = r(this),\n        n = o(e.length),\n        i = n - 1;\n\n    for (arguments.length > 1 && (i = s(i, a(arguments[1]))), i < 0 && (i = n + i); i >= 0; i--) {\n      if (i in e && e[i] === t) return i || 0;\n    }\n\n    return -1;\n  } : l;\n},,,, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(31),\n      o = [].reverse,\n      i = [1, 2];\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: String(i) === String(i.reverse())\n  }, {\n    reverse: function reverse() {\n      return a(this) && (this.length = this.length), o.call(this);\n    }\n  });\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(15),\n      o = n(138),\n      i = n(139),\n      s = n(1),\n      l = 1..toFixed,\n      u = Math.floor,\n      c = function c(t, e, n) {\n    return 0 === e ? n : e % 2 == 1 ? c(t, e - 1, n * t) : c(t * t, e / 2, n);\n  };\n\n  r({\n    target: \"Number\",\n    proto: !0,\n    forced: l && (\"0.000\" !== 8e-5.toFixed(3) || \"1\" !== .9.toFixed(0) || \"1.25\" !== 1.255.toFixed(2) || \"1000000000000000128\" !== 0xde0b6b3a7640080.toFixed(0)) || !s(function () {\n      l.call({});\n    })\n  }, {\n    toFixed: function toFixed(t) {\n      var e,\n          n,\n          r,\n          s,\n          l = o(this),\n          f = a(t),\n          d = [0, 0, 0, 0, 0, 0],\n          h = \"\",\n          p = \"0\",\n          g = function g(t, e) {\n        for (var n = -1, r = e; ++n < 6;) {\n          r += t * d[n], d[n] = r % 1e7, r = u(r / 1e7);\n        }\n      },\n          v = function v(t) {\n        for (var e = 6, n = 0; --e >= 0;) {\n          n += d[e], d[e] = u(n / t), n = n % t * 1e7;\n        }\n      },\n          b = function b() {\n        for (var t = 6, e = \"\"; --t >= 0;) {\n          if (\"\" !== e || 0 === t || 0 !== d[t]) {\n            var n = String(d[t]);\n            e = \"\" === e ? n : e + i.call(\"0\", 7 - n.length) + n;\n          }\n        }\n\n        return e;\n      };\n\n      if (f < 0 || f > 20) throw RangeError(\"Incorrect fraction digits\");\n      if (l != l) return \"NaN\";\n      if (l <= -1e21 || l >= 1e21) return String(l);\n      if (l < 0 && (h = \"-\", l = -l), l > 1e-21) if (n = (e = function (t) {\n        for (var e = 0, n = t; n >= 4096;) {\n          e += 12, n /= 4096;\n        }\n\n        for (; n >= 2;) {\n          e += 1, n /= 2;\n        }\n\n        return e;\n      }(l * c(2, 69, 1)) - 69) < 0 ? l * c(2, -e, 1) : l / c(2, e, 1), n *= 4503599627370496, (e = 52 - e) > 0) {\n        for (g(0, n), r = f; r >= 7;) {\n          g(1e7, 0), r -= 7;\n        }\n\n        for (g(c(10, r, 1), 0), r = e - 1; r >= 23;) {\n          v(1 << 23), r -= 23;\n        }\n\n        v(1 << r), g(1, 1), v(2), p = b();\n      } else g(0, n), g(1 << -e, 0), p = b() + i.call(\"0\", f);\n      return p = f > 0 ? h + ((s = p.length) <= f ? \"0.\" + i.call(\"0\", f - s) + p : p.slice(0, s - f) + \".\" + p.slice(s - f)) : h + p;\n    }\n  });\n}, function (t, e, n) {\n  var r = n(17);\n\n  t.exports = function (t) {\n    if (\"number\" != typeof t && \"Number\" != r(t)) throw TypeError(\"Incorrect invocation\");\n    return +t;\n  };\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(15),\n      a = n(13);\n\n  t.exports = \"\".repeat || function (t) {\n    var e = String(a(this)),\n        n = \"\",\n        o = r(t);\n    if (o < 0 || o == 1 / 0) throw RangeError(\"Wrong number of repetitions\");\n\n    for (; o > 0; (o >>>= 1) && (e += e)) {\n      1 & o && (n += e);\n    }\n\n    return n;\n  };\n}, function (t, e, n) {\n  var r = n(0),\n      a = n(80).trim,\n      o = n(67),\n      i = r.parseInt,\n      s = /^[+-]?0[Xx]/,\n      l = 8 !== i(o + \"08\") || 22 !== i(o + \"0x16\");\n  t.exports = l ? function (t, e) {\n    var n = a(String(t));\n    return i(n, e >>> 0 || (s.test(n) ? 16 : 10));\n  } : i;\n},,,,,,,,,,,,,,,,,,,,,,,,,,, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(128).left;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: n(52)(\"reduce\")\n  }, {\n    reduce: function reduce(t) {\n      return a(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(87),\n      a = n(8),\n      o = n(13),\n      i = n(206),\n      s = n(88);\n  r(\"search\", 1, function (t, e, n) {\n    return [function (e) {\n      var n = o(this),\n          r = null == e ? void 0 : e[t];\n      return void 0 !== r ? r.call(e, n) : new RegExp(e)[t](String(n));\n    }, function (t) {\n      var r = n(e, t, this);\n      if (r.done) return r.value;\n      var o = a(t),\n          l = String(this),\n          u = o.lastIndex;\n      i(u, 0) || (o.lastIndex = 0);\n      var c = s(o, l);\n      return i(o.lastIndex, u) || (o.lastIndex = u), null === c ? -1 : c.index;\n    }];\n  });\n}, function (t, e) {\n  t.exports = Object.is || function (t, e) {\n    return t === e ? 0 !== t || 1 / t == 1 / e : t != t && e != e;\n  };\n},,,,,,,,, function (t, e, n) {\n  var r = n(4),\n      a = n(132);\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: a !== [].lastIndexOf\n  }, {\n    lastIndexOf: a\n  });\n}, function (t, e) {\n  t.exports = datatables.net;\n},,,,,,,,,,,,,,,,,,,,,,,,,,,,, function (t, e, n) {\n  n(246), t.exports = n(248);\n}, function (t, e, n) {\n  \"use strict\";\n\n  n.r(e), function (t) {\n    var e;\n    n(69), n(71), n(72), n(75), n(91), n(44), n(65), n(59), n(78), n(215), n(97), n(167), n(247), n(136), n(101), n(131), n(110), n(94), n(123), n(137), n(70), n(113), n(127), n(129), n(68), n(106), n(73), n(116), n(90), n(205), n(98), n(114), n(74);\n\n    function r(t) {\n      return (r = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      })(t);\n    }\n    /*! DataTables 1.10.18\n     * ©2008-2018 SpryMedia Ltd - datatables.net/license\n     */\n\n\n    e = function e(t, _e3, n, a) {\n      var o,\n          _i,\n          s,\n          l,\n          u = function e(n) {\n        this.$ = function (t, e) {\n          return this.api(!0).$(t, e);\n        }, this._ = function (t, e) {\n          return this.api(!0).rows(t, e).data();\n        }, this.api = function (t) {\n          return new _i(t ? ie(this[o.iApiIndex]) : this);\n        }, this.fnAddData = function (e, n) {\n          var r = this.api(!0),\n              o = t.isArray(e) && (t.isArray(e[0]) || t.isPlainObject(e[0])) ? r.rows.add(e) : r.row.add(e);\n          return (n === a || n) && r.draw(), o.flatten().toArray();\n        }, this.fnAdjustColumnSizing = function (t) {\n          var e = this.api(!0).columns.adjust(),\n              n = e.settings()[0],\n              r = n.oScroll;\n          t === a || t ? e.draw(!1) : \"\" === r.sX && \"\" === r.sY || Ut(n);\n        }, this.fnClearTable = function (t) {\n          var e = this.api(!0).clear();\n          (t === a || t) && e.draw();\n        }, this.fnClose = function (t) {\n          this.api(!0).row(t).child.hide();\n        }, this.fnDeleteRow = function (t, e, n) {\n          var r = this.api(!0),\n              o = r.rows(t),\n              i = o.settings()[0],\n              s = i.aoData[o[0][0]];\n          return o.remove(), e && e.call(this, i, s), (n === a || n) && r.draw(), s;\n        }, this.fnDestroy = function (t) {\n          this.api(!0).destroy(t);\n        }, this.fnDraw = function (t) {\n          this.api(!0).draw(t);\n        }, this.fnFilter = function (t, e, n, r, o, i) {\n          var s = this.api(!0);\n          null === e || e === a ? s.search(t, n, r, i) : s.column(e).search(t, n, r, i), s.draw();\n        }, this.fnGetData = function (t, e) {\n          var n = this.api(!0);\n\n          if (t !== a) {\n            var r = t.nodeName ? t.nodeName.toLowerCase() : \"\";\n            return e !== a || \"td\" == r || \"th\" == r ? n.cell(t, e).data() : n.row(t).data() || null;\n          }\n\n          return n.data().toArray();\n        }, this.fnGetNodes = function (t) {\n          var e = this.api(!0);\n          return t !== a ? e.row(t).node() : e.rows().nodes().flatten().toArray();\n        }, this.fnGetPosition = function (t) {\n          var e = this.api(!0),\n              n = t.nodeName.toUpperCase();\n          if (\"TR\" == n) return e.row(t).index();\n\n          if (\"TD\" == n || \"TH\" == n) {\n            var r = e.cell(t).index();\n            return [r.row, r.columnVisible, r.column];\n          }\n\n          return null;\n        }, this.fnIsOpen = function (t) {\n          return this.api(!0).row(t).child.isShown();\n        }, this.fnOpen = function (t, e, n) {\n          return this.api(!0).row(t).child(e, n).show().child()[0];\n        }, this.fnPageChange = function (t, e) {\n          var n = this.api(!0).page(t);\n          (e === a || e) && n.draw(!1);\n        }, this.fnSetColumnVis = function (t, e, n) {\n          var r = this.api(!0).column(t).visible(e);\n          (n === a || n) && r.columns.adjust().draw();\n        }, this.fnSettings = function () {\n          return ie(this[o.iApiIndex]);\n        }, this.fnSort = function (t) {\n          this.api(!0).order(t).draw();\n        }, this.fnSortListener = function (t, e, n) {\n          this.api(!0).order.listener(t, e, n);\n        }, this.fnUpdate = function (t, e, n, r, o) {\n          var i = this.api(!0);\n          return n === a || null === n ? i.row(e).data(t) : i.cell(e, n).data(t), (o === a || o) && i.columns.adjust(), (r === a || r) && i.draw(), 0;\n        }, this.fnVersionCheck = o.fnVersionCheck;\n        var r = this,\n            s = n === a,\n            l = this.length;\n\n        for (var u in s && (n = {}), this.oApi = this.internal = o.internal, e.ext.internal) {\n          u && (this[u] = Re(u));\n        }\n\n        return this.each(function () {\n          var o,\n              i = l > 1 ? ue({}, n, !0) : n,\n              u = 0,\n              c = this.getAttribute(\"id\"),\n              f = !1,\n              d = e.defaults,\n              h = t(this);\n\n          if (\"table\" == this.nodeName.toLowerCase()) {\n            P(d), L(d.column), A(d, d, !0), A(d.column, d.column, !0), A(d, t.extend(i, h.data()));\n            var p = e.settings;\n\n            for (u = 0, o = p.length; u < o; u++) {\n              var g = p[u];\n\n              if (g.nTable == this || g.nTHead && g.nTHead.parentNode == this || g.nTFoot && g.nTFoot.parentNode == this) {\n                var v = i.bRetrieve !== a ? i.bRetrieve : d.bRetrieve,\n                    b = i.bDestroy !== a ? i.bDestroy : d.bDestroy;\n                if (s || v) return g.oInstance;\n\n                if (b) {\n                  g.oInstance.fnDestroy();\n                  break;\n                }\n\n                return void se(g, 0, \"Cannot reinitialise DataTable\", 3);\n              }\n\n              if (g.sTableId == this.id) {\n                p.splice(u, 1);\n                break;\n              }\n            }\n\n            null !== c && \"\" !== c || (c = \"DataTables_Table_\" + e.ext._unique++, this.id = c);\n            var y = t.extend(!0, {}, e.models.oSettings, {\n              sDestroyWidth: h[0].style.width,\n              sInstance: c,\n              sTableId: c\n            });\n            y.nTable = this, y.oApi = r.internal, y.oInit = i, p.push(y), y.oInstance = 1 === r.length ? r : h.dataTable(), P(i), j(i.oLanguage), i.aLengthMenu && !i.iDisplayLength && (i.iDisplayLength = t.isArray(i.aLengthMenu[0]) ? i.aLengthMenu[0][0] : i.aLengthMenu[0]), i = ue(t.extend(!0, {}, d), i), le(y.oFeatures, i, [\"bPaginate\", \"bLengthChange\", \"bFilter\", \"bSort\", \"bSortMulti\", \"bInfo\", \"bProcessing\", \"bAutoWidth\", \"bSortClasses\", \"bServerSide\", \"bDeferRender\"]), le(y, i, [\"asStripeClasses\", \"ajax\", \"fnServerData\", \"fnFormatNumber\", \"sServerMethod\", \"aaSorting\", \"aaSortingFixed\", \"aLengthMenu\", \"sPaginationType\", \"sAjaxSource\", \"sAjaxDataProp\", \"iStateDuration\", \"sDom\", \"bSortCellsTop\", \"iTabIndex\", \"fnStateLoadCallback\", \"fnStateSaveCallback\", \"renderer\", \"searchDelay\", \"rowId\", [\"iCookieDuration\", \"iStateDuration\"], [\"oSearch\", \"oPreviousSearch\"], [\"aoSearchCols\", \"aoPreSearchCols\"], [\"iDisplayLength\", \"_iDisplayLength\"]]), le(y.oScroll, i, [[\"sScrollX\", \"sX\"], [\"sScrollXInner\", \"sXInner\"], [\"sScrollY\", \"sY\"], [\"bScrollCollapse\", \"bCollapse\"]]), le(y.oLanguage, i, \"fnInfoCallback\"), fe(y, \"aoDrawCallback\", i.fnDrawCallback, \"user\"), fe(y, \"aoServerParams\", i.fnServerParams, \"user\"), fe(y, \"aoStateSaveParams\", i.fnStateSaveParams, \"user\"), fe(y, \"aoStateLoadParams\", i.fnStateLoadParams, \"user\"), fe(y, \"aoStateLoaded\", i.fnStateLoaded, \"user\"), fe(y, \"aoRowCallback\", i.fnRowCallback, \"user\"), fe(y, \"aoRowCreatedCallback\", i.fnCreatedRow, \"user\"), fe(y, \"aoHeaderCallback\", i.fnHeaderCallback, \"user\"), fe(y, \"aoFooterCallback\", i.fnFooterCallback, \"user\"), fe(y, \"aoInitComplete\", i.fnInitComplete, \"user\"), fe(y, \"aoPreDrawCallback\", i.fnPreDrawCallback, \"user\"), y.rowIdFn = Z(i.rowId), R(y);\n            var m = y.oClasses;\n\n            if (t.extend(m, e.ext.classes, i.oClasses), h.addClass(m.sTable), y.iInitDisplayStart === a && (y.iInitDisplayStart = i.iDisplayStart, y._iDisplayStart = i.iDisplayStart), null !== i.iDeferLoading) {\n              y.bDeferLoading = !0;\n              var S = t.isArray(i.iDeferLoading);\n              y._iRecordsDisplay = S ? i.iDeferLoading[0] : i.iDeferLoading, y._iRecordsTotal = S ? i.iDeferLoading[1] : i.iDeferLoading;\n            }\n\n            var x = y.oLanguage;\n            t.extend(!0, x, i.oLanguage), x.sUrl && (t.ajax({\n              dataType: \"json\",\n              url: x.sUrl,\n              success: function success(e) {\n                j(e), A(d.oLanguage, e), t.extend(!0, x, e), Rt(y);\n              },\n              error: function error() {\n                Rt(y);\n              }\n            }), f = !0), null === i.asStripeClasses && (y.asStripeClasses = [m.sStripeOdd, m.sStripeEven]);\n            var D = y.asStripeClasses,\n                w = h.children(\"tbody\").find(\"tr\").eq(0);\n            -1 !== t.inArray(!0, t.map(D, function (t, e) {\n              return w.hasClass(t);\n            })) && (t(\"tbody tr\", this).removeClass(D.join(\" \")), y.asDestroyStripes = D.slice());\n\n            var _,\n                T = [],\n                C = this.getElementsByTagName(\"thead\");\n\n            if (0 !== C.length && (ft(y.aoHeader, C[0]), T = dt(y)), null === i.aoColumns) for (_ = [], u = 0, o = T.length; u < o; u++) {\n              _.push(null);\n            } else _ = i.aoColumns;\n\n            for (u = 0, o = _.length; u < o; u++) {\n              E(y, T ? T[u] : null);\n            }\n\n            if (V(y, i.aoColumnDefs, _, function (t, e) {\n              N(y, t, e);\n            }), w.length) {\n              var I = function I(t, e) {\n                return null !== t.getAttribute(\"data-\" + e) ? e : null;\n              };\n\n              t(w[0]).children(\"th, td\").each(function (t, e) {\n                var n = y.aoColumns[t];\n\n                if (n.mData === t) {\n                  var r = I(e, \"sort\") || I(e, \"order\"),\n                      o = I(e, \"filter\") || I(e, \"search\");\n                  null === r && null === o || (n.mData = {\n                    _: t + \".display\",\n                    sort: null !== r ? t + \".@data-\" + r : a,\n                    type: null !== r ? t + \".@data-\" + r : a,\n                    filter: null !== o ? t + \".@data-\" + o : a\n                  }, N(y, t));\n                }\n              });\n            }\n\n            var F = y.oFeatures,\n                O = function O() {\n              if (i.aaSorting === a) {\n                var e = y.aaSorting;\n\n                for (u = 0, o = e.length; u < o; u++) {\n                  e[u][1] = y.aoColumns[u].asSorting[0];\n                }\n              }\n\n              ne(y), F.bSort && fe(y, \"aoDrawCallback\", function () {\n                if (y.bSorted) {\n                  var e = Zt(y),\n                      n = {};\n                  t.each(e, function (t, e) {\n                    n[e.src] = e.dir;\n                  }), de(y, null, \"order\", [y, e, n]), Kt(y);\n                }\n              }), fe(y, \"aoDrawCallback\", function () {\n                (y.bSorted || \"ssp\" === ge(y) || F.bDeferRender) && ne(y);\n              }, \"sc\");\n              var n = h.children(\"caption\").each(function () {\n                this._captionSide = t(this).css(\"caption-side\");\n              }),\n                  r = h.children(\"thead\");\n              0 === r.length && (r = t(\"<thead/>\").appendTo(h)), y.nTHead = r[0];\n              var s = h.children(\"tbody\");\n              0 === s.length && (s = t(\"<tbody/>\").appendTo(h)), y.nTBody = s[0];\n              var l = h.children(\"tfoot\");\n              if (0 === l.length && n.length > 0 && (\"\" !== y.oScroll.sX || \"\" !== y.oScroll.sY) && (l = t(\"<tfoot/>\").appendTo(h)), 0 === l.length || 0 === l.children().length ? h.addClass(m.sNoFooter) : l.length > 0 && (y.nTFoot = l[0], ft(y.aoFooter, y.nTFoot)), i.aaData) for (u = 0; u < i.aaData.length; u++) {\n                J(y, i.aaData[u]);\n              } else (y.bDeferLoading || \"dom\" == ge(y)) && X(y, t(y.nTBody).children(\"tr\"));\n              y.aiDisplay = y.aiDisplayMaster.slice(), y.bInitialised = !0, !1 === f && Rt(y);\n            };\n\n            i.bStateSave ? (F.bStateSave = !0, fe(y, \"aoDrawCallback\", ae, \"state_save\"), oe(y, 0, O)) : O();\n          } else se(null, 0, \"Non-table node initialisation (\" + this.nodeName + \")\", 2);\n        }), r = null, this;\n      },\n          c = {},\n          f = /[\\r\\n]/g,\n          d = /<.*?>/g,\n          h = /^\\d{2,4}[\\.\\/\\-]\\d{1,2}[\\.\\/\\-]\\d{1,2}([T ]{1}\\d{1,2}[:\\.]\\d{2}([\\.:]\\d{2})?)?$/,\n          p = new RegExp(\"(\\\\\" + [\"/\", \".\", \"*\", \"+\", \"?\", \"|\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"\\\\\", \"$\", \"^\", \"-\"].join(\"|\\\\\") + \")\", \"g\"),\n          g = /[',$£€¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfkɃΞ]/gi,\n          v = function v(t) {\n        return !t || !0 === t || \"-\" === t;\n      },\n          b = function b(t) {\n        var e = parseInt(t, 10);\n        return !isNaN(e) && isFinite(t) ? e : null;\n      },\n          y = function y(t, e) {\n        return c[e] || (c[e] = new RegExp(_t(e), \"g\")), \"string\" == typeof t && \".\" !== e ? t.replace(/\\./g, \"\").replace(c[e], \".\") : t;\n      },\n          m = function m(t, e, n) {\n        var r = \"string\" == typeof t;\n        return !!v(t) || (e && r && (t = y(t, e)), n && r && (t = t.replace(g, \"\")), !isNaN(parseFloat(t)) && isFinite(t));\n      },\n          S = function S(t, e, n) {\n        return !!v(t) || function (t) {\n          return v(t) || \"string\" == typeof t;\n        }(t) && !!m(T(t), e, n) || null;\n      },\n          x = function x(t, e, n) {\n        var r = [],\n            o = 0,\n            i = t.length;\n        if (n !== a) for (; o < i; o++) {\n          t[o] && t[o][e] && r.push(t[o][e][n]);\n        } else for (; o < i; o++) {\n          t[o] && r.push(t[o][e]);\n        }\n        return r;\n      },\n          D = function D(t, e, n, r) {\n        var o = [],\n            i = 0,\n            s = e.length;\n        if (r !== a) for (; i < s; i++) {\n          t[e[i]][n] && o.push(t[e[i]][n][r]);\n        } else for (; i < s; i++) {\n          o.push(t[e[i]][n]);\n        }\n        return o;\n      },\n          w = function w(t, e) {\n        var n,\n            r = [];\n        e === a ? (e = 0, n = t) : (n = e, e = t);\n\n        for (var o = e; o < n; o++) {\n          r.push(o);\n        }\n\n        return r;\n      },\n          _ = function _(t) {\n        for (var e = [], n = 0, r = t.length; n < r; n++) {\n          t[n] && e.push(t[n]);\n        }\n\n        return e;\n      },\n          T = function T(t) {\n        return t.replace(d, \"\");\n      },\n          C = function C(t) {\n        if (function (t) {\n          if (t.length < 2) return !0;\n\n          for (var e = t.slice().sort(), n = e[0], r = 1, a = e.length; r < a; r++) {\n            if (e[r] === n) return !1;\n            n = e[r];\n          }\n\n          return !0;\n        }(t)) return t.slice();\n        var e,\n            n,\n            r,\n            a = [],\n            o = t.length,\n            i = 0;\n\n        t: for (n = 0; n < o; n++) {\n          for (e = t[n], r = 0; r < i; r++) {\n            if (a[r] === e) continue t;\n          }\n\n          a.push(e), i++;\n        }\n\n        return a;\n      };\n\n      function I(e) {\n        var n,\n            r,\n            a = {};\n        t.each(e, function (t, o) {\n          (n = t.match(/^([^A-Z]+?)([A-Z])/)) && -1 !== \"a aa ai ao as b fn i m o s \".indexOf(n[1] + \" \") && (r = t.replace(n[0], n[2].toLowerCase()), a[r] = t, \"o\" === n[1] && I(e[t]));\n        }), e._hungarianMap = a;\n      }\n\n      function A(e, n, r) {\n        var o;\n        e._hungarianMap || I(e), t.each(n, function (i, s) {\n          (o = e._hungarianMap[i]) === a || !r && n[o] !== a || (\"o\" === o.charAt(0) ? (n[o] || (n[o] = {}), t.extend(!0, n[o], n[i]), A(e[o], n[o], r)) : n[o] = n[i]);\n        });\n      }\n\n      function j(t) {\n        var e = u.defaults.oLanguage,\n            n = e.sDecimal;\n\n        if (n && Pe(n), t) {\n          var r = t.sZeroRecords;\n          !t.sEmptyTable && r && \"No data available in table\" === e.sEmptyTable && le(t, t, \"sZeroRecords\", \"sEmptyTable\"), !t.sLoadingRecords && r && \"Loading...\" === e.sLoadingRecords && le(t, t, \"sZeroRecords\", \"sLoadingRecords\"), t.sInfoThousands && (t.sThousands = t.sInfoThousands);\n          var a = t.sDecimal;\n          a && n !== a && Pe(a);\n        }\n      }\n\n      u.util = {\n        throttle: function throttle(t, e) {\n          var n,\n              r,\n              o = e !== a ? e : 200;\n          return function () {\n            var e = this,\n                i = +new Date(),\n                s = arguments;\n            n && i < n + o ? (clearTimeout(r), r = setTimeout(function () {\n              n = a, t.apply(e, s);\n            }, o)) : (n = i, t.apply(e, s));\n          };\n        },\n        escapeRegex: function escapeRegex(t) {\n          return t.replace(p, \"\\\\$1\");\n        }\n      };\n\n      var F = function F(t, e, n) {\n        t[e] !== a && (t[n] = t[e]);\n      };\n\n      function P(t) {\n        F(t, \"ordering\", \"bSort\"), F(t, \"orderMulti\", \"bSortMulti\"), F(t, \"orderClasses\", \"bSortClasses\"), F(t, \"orderCellsTop\", \"bSortCellsTop\"), F(t, \"order\", \"aaSorting\"), F(t, \"orderFixed\", \"aaSortingFixed\"), F(t, \"paging\", \"bPaginate\"), F(t, \"pagingType\", \"sPaginationType\"), F(t, \"pageLength\", \"iDisplayLength\"), F(t, \"searching\", \"bFilter\"), \"boolean\" == typeof t.sScrollX && (t.sScrollX = t.sScrollX ? \"100%\" : \"\"), \"boolean\" == typeof t.scrollX && (t.scrollX = t.scrollX ? \"100%\" : \"\");\n        var e = t.aoSearchCols;\n        if (e) for (var n = 0, r = e.length; n < r; n++) {\n          e[n] && A(u.models.oSearch, e[n]);\n        }\n      }\n\n      function L(e) {\n        F(e, \"orderable\", \"bSortable\"), F(e, \"orderData\", \"aDataSort\"), F(e, \"orderSequence\", \"asSorting\"), F(e, \"orderDataType\", \"sortDataType\");\n        var n = e.aDataSort;\n        \"number\" != typeof n || t.isArray(n) || (e.aDataSort = [n]);\n      }\n\n      function R(n) {\n        if (!u.__browser) {\n          var r = {};\n          u.__browser = r;\n          var a = t(\"<div/>\").css({\n            position: \"fixed\",\n            top: 0,\n            left: -1 * t(_e3).scrollLeft(),\n            height: 1,\n            width: 1,\n            overflow: \"hidden\"\n          }).append(t(\"<div/>\").css({\n            position: \"absolute\",\n            top: 1,\n            left: 1,\n            width: 100,\n            overflow: \"scroll\"\n          }).append(t(\"<div/>\").css({\n            width: \"100%\",\n            height: 10\n          }))).appendTo(\"body\"),\n              o = a.children(),\n              i = o.children();\n          r.barWidth = o[0].offsetWidth - o[0].clientWidth, r.bScrollOversize = 100 === i[0].offsetWidth && 100 !== o[0].clientWidth, r.bScrollbarLeft = 1 !== Math.round(i.offset().left), r.bBounding = !!a[0].getBoundingClientRect().width, a.remove();\n        }\n\n        t.extend(n.oBrowser, u.__browser), n.oScroll.iBarWidth = u.__browser.barWidth;\n      }\n\n      function O(t, e, n, r, o, i) {\n        var s,\n            l = r,\n            u = !1;\n\n        for (n !== a && (s = n, u = !0); l !== o;) {\n          t.hasOwnProperty(l) && (s = u ? e(s, t[l], l, t) : t[l], u = !0, l += i);\n        }\n\n        return s;\n      }\n\n      function E(e, r) {\n        var a = u.defaults.column,\n            o = e.aoColumns.length,\n            i = t.extend({}, u.models.oColumn, a, {\n          nTh: r || n.createElement(\"th\"),\n          sTitle: a.sTitle ? a.sTitle : r ? r.innerHTML : \"\",\n          aDataSort: a.aDataSort ? a.aDataSort : [o],\n          mData: a.mData ? a.mData : o,\n          idx: o\n        });\n        e.aoColumns.push(i);\n        var s = e.aoPreSearchCols;\n        s[o] = t.extend({}, u.models.oSearch, s[o]), N(e, o, t(r).data());\n      }\n\n      function N(e, n, r) {\n        var o = e.aoColumns[n],\n            i = e.oClasses,\n            s = t(o.nTh);\n\n        if (!o.sWidthOrig) {\n          o.sWidthOrig = s.attr(\"width\") || null;\n          var l = (s.attr(\"style\") || \"\").match(/width:\\s*(\\d+[pxem%]+)/);\n          l && (o.sWidthOrig = l[1]);\n        }\n\n        r !== a && null !== r && (L(r), A(u.defaults.column, r), r.mDataProp === a || r.mData || (r.mData = r.mDataProp), r.sType && (o._sManualType = r.sType), r.className && !r.sClass && (r.sClass = r.className), r.sClass && s.addClass(r.sClass), t.extend(o, r), le(o, r, \"sWidth\", \"sWidthOrig\"), r.iDataSort !== a && (o.aDataSort = [r.iDataSort]), le(o, r, \"aDataSort\"));\n\n        var c = o.mData,\n            f = Z(c),\n            d = o.mRender ? Z(o.mRender) : null,\n            h = function h(t) {\n          return \"string\" == typeof t && -1 !== t.indexOf(\"@\");\n        };\n\n        o._bAttrSrc = t.isPlainObject(c) && (h(c.sort) || h(c.type) || h(c.filter)), o._setter = null, o.fnGetData = function (t, e, n) {\n          var r = f(t, e, a, n);\n          return d && e ? d(r, e, t, n) : r;\n        }, o.fnSetData = function (t, e, n) {\n          return Q(c)(t, e, n);\n        }, \"number\" != typeof c && (e._rowReadObject = !0), e.oFeatures.bSort || (o.bSortable = !1, s.addClass(i.sSortableNone));\n        var p = -1 !== t.inArray(\"asc\", o.asSorting),\n            g = -1 !== t.inArray(\"desc\", o.asSorting);\n        o.bSortable && (p || g) ? p && !g ? (o.sSortingClass = i.sSortableAsc, o.sSortingClassJUI = i.sSortJUIAscAllowed) : !p && g ? (o.sSortingClass = i.sSortableDesc, o.sSortingClassJUI = i.sSortJUIDescAllowed) : (o.sSortingClass = i.sSortable, o.sSortingClassJUI = i.sSortJUI) : (o.sSortingClass = i.sSortableNone, o.sSortingClassJUI = \"\");\n      }\n\n      function k(t) {\n        if (!1 !== t.oFeatures.bAutoWidth) {\n          var e = t.aoColumns;\n          Xt(t);\n\n          for (var n = 0, r = e.length; n < r; n++) {\n            e[n].nTh.style.width = e[n].sWidth;\n          }\n        }\n\n        var a = t.oScroll;\n        \"\" === a.sY && \"\" === a.sX || Ut(t), de(t, null, \"column-sizing\", [t]);\n      }\n\n      function M(t, e) {\n        var n = B(t, \"bVisible\");\n        return \"number\" == typeof n[e] ? n[e] : null;\n      }\n\n      function H(e, n) {\n        var r = B(e, \"bVisible\"),\n            a = t.inArray(n, r);\n        return -1 !== a ? a : null;\n      }\n\n      function W(e) {\n        var n = 0;\n        return t.each(e.aoColumns, function (e, r) {\n          r.bVisible && \"none\" !== t(r.nTh).css(\"display\") && n++;\n        }), n;\n      }\n\n      function B(e, n) {\n        var r = [];\n        return t.map(e.aoColumns, function (t, e) {\n          t[n] && r.push(e);\n        }), r;\n      }\n\n      function U(t) {\n        var e,\n            n,\n            r,\n            o,\n            i,\n            s,\n            l,\n            c,\n            f,\n            d = t.aoColumns,\n            h = t.aoData,\n            p = u.ext.type.detect;\n\n        for (e = 0, n = d.length; e < n; e++) {\n          if (f = [], !(l = d[e]).sType && l._sManualType) l.sType = l._sManualType;else if (!l.sType) {\n            for (r = 0, o = p.length; r < o; r++) {\n              for (i = 0, s = h.length; i < s && (f[i] === a && (f[i] = G(t, i, e, \"type\")), (c = p[r](f[i], t)) || r === p.length - 1) && \"html\" !== c; i++) {\n                ;\n              }\n\n              if (c) {\n                l.sType = c;\n                break;\n              }\n            }\n\n            l.sType || (l.sType = \"string\");\n          }\n        }\n      }\n\n      function V(e, n, r, o) {\n        var i,\n            s,\n            l,\n            u,\n            c,\n            f,\n            d,\n            h = e.aoColumns;\n        if (n) for (i = n.length - 1; i >= 0; i--) {\n          var p = (d = n[i]).targets !== a ? d.targets : d.aTargets;\n\n          for (t.isArray(p) || (p = [p]), l = 0, u = p.length; l < u; l++) {\n            if (\"number\" == typeof p[l] && p[l] >= 0) {\n              for (; h.length <= p[l];) {\n                E(e);\n              }\n\n              o(p[l], d);\n            } else if (\"number\" == typeof p[l] && p[l] < 0) o(h.length + p[l], d);else if (\"string\" == typeof p[l]) for (c = 0, f = h.length; c < f; c++) {\n              (\"_all\" == p[l] || t(h[c].nTh).hasClass(p[l])) && o(c, d);\n            }\n          }\n        }\n        if (r) for (i = 0, s = r.length; i < s; i++) {\n          o(i, r[i]);\n        }\n      }\n\n      function J(e, n, r, o) {\n        var i = e.aoData.length,\n            s = t.extend(!0, {}, u.models.oRow, {\n          src: r ? \"dom\" : \"data\",\n          idx: i\n        });\n        s._aData = n, e.aoData.push(s);\n\n        for (var l = e.aoColumns, c = 0, f = l.length; c < f; c++) {\n          l[c].sType = null;\n        }\n\n        e.aiDisplayMaster.push(i);\n        var d = e.rowIdFn(n);\n        return d !== a && (e.aIds[d] = s), !r && e.oFeatures.bDeferRender || at(e, i, r, o), i;\n      }\n\n      function X(e, n) {\n        var r;\n        return n instanceof t || (n = t(n)), n.map(function (t, n) {\n          return r = rt(e, n), J(e, r.data, n, r.cells);\n        });\n      }\n\n      function G(t, e, n, r) {\n        var o = t.iDraw,\n            i = t.aoColumns[n],\n            s = t.aoData[e]._aData,\n            l = i.sDefaultContent,\n            u = i.fnGetData(s, r, {\n          settings: t,\n          row: e,\n          col: n\n        });\n        if (u === a) return t.iDrawError != o && null === l && (se(t, 0, \"Requested unknown parameter \" + (\"function\" == typeof i.mData ? \"{function}\" : \"'\" + i.mData + \"'\") + \" for row \" + e + \", column \" + n, 4), t.iDrawError = o), l;\n\n        if (u !== s && null !== u || null === l || r === a) {\n          if (\"function\" == typeof u) return u.call(s);\n        } else u = l;\n\n        return null === u && \"display\" == r ? \"\" : u;\n      }\n\n      function $(t, e, n, r) {\n        var a = t.aoColumns[n],\n            o = t.aoData[e]._aData;\n        a.fnSetData(o, r, {\n          settings: t,\n          row: e,\n          col: n\n        });\n      }\n\n      var q = /\\[.*?\\]$/,\n          z = /\\(\\)$/;\n\n      function Y(e) {\n        return t.map(e.match(/(\\\\.|[^\\.])+/g) || [\"\"], function (t) {\n          return t.replace(/\\\\\\./g, \".\");\n        });\n      }\n\n      function Z(e) {\n        if (t.isPlainObject(e)) {\n          var n = {};\n          return t.each(e, function (t, e) {\n            e && (n[t] = Z(e));\n          }), function (t, e, r, o) {\n            var i = n[e] || n._;\n            return i !== a ? i(t, e, r, o) : t;\n          };\n        }\n\n        return null === e ? function (t) {\n          return t;\n        } : \"function\" == typeof e ? function (t, n, r, a) {\n          return e(t, n, r, a);\n        } : \"string\" != typeof e || -1 === e.indexOf(\".\") && -1 === e.indexOf(\"[\") && -1 === e.indexOf(\"(\") ? function (t, n) {\n          return t[e];\n        } : function (n, r) {\n          return function e(n, r, o) {\n            var i, s, l, u;\n            if (\"\" !== o) for (var c = Y(o), f = 0, d = c.length; f < d; f++) {\n              if (i = c[f].match(q), s = c[f].match(z), i) {\n                if (c[f] = c[f].replace(q, \"\"), \"\" !== c[f] && (n = n[c[f]]), l = [], c.splice(0, f + 1), u = c.join(\".\"), t.isArray(n)) for (var h = 0, p = n.length; h < p; h++) {\n                  l.push(e(n[h], r, u));\n                }\n                var g = i[0].substring(1, i[0].length - 1);\n                n = \"\" === g ? l : l.join(g);\n                break;\n              }\n\n              if (s) c[f] = c[f].replace(z, \"\"), n = n[c[f]]();else {\n                if (null === n || n[c[f]] === a) return a;\n                n = n[c[f]];\n              }\n            }\n            return n;\n          }(n, r, e);\n        };\n      }\n\n      function Q(e) {\n        return t.isPlainObject(e) ? Q(e._) : null === e ? function () {} : \"function\" == typeof e ? function (t, n, r) {\n          e(t, \"set\", n, r);\n        } : \"string\" != typeof e || -1 === e.indexOf(\".\") && -1 === e.indexOf(\"[\") && -1 === e.indexOf(\"(\") ? function (t, n) {\n          t[e] = n;\n        } : function (n, r) {\n          return function e(n, r, o) {\n            for (var i, s, l, u, c, f = Y(o), d = f[f.length - 1], h = 0, p = f.length - 1; h < p; h++) {\n              if (s = f[h].match(q), l = f[h].match(z), s) {\n                if (f[h] = f[h].replace(q, \"\"), n[f[h]] = [], (i = f.slice()).splice(0, h + 1), c = i.join(\".\"), t.isArray(r)) for (var g = 0, v = r.length; g < v; g++) {\n                  e(u = {}, r[g], c), n[f[h]].push(u);\n                } else n[f[h]] = r;\n                return;\n              }\n\n              l && (f[h] = f[h].replace(z, \"\"), n = n[f[h]](r)), null !== n[f[h]] && n[f[h]] !== a || (n[f[h]] = {}), n = n[f[h]];\n            }\n\n            d.match(z) ? n = n[d.replace(z, \"\")](r) : n[d.replace(q, \"\")] = r;\n          }(n, r, e);\n        };\n      }\n\n      function K(t) {\n        return x(t.aoData, \"_aData\");\n      }\n\n      function tt(t) {\n        t.aoData.length = 0, t.aiDisplayMaster.length = 0, t.aiDisplay.length = 0, t.aIds = {};\n      }\n\n      function et(t, e, n) {\n        for (var r = -1, o = 0, i = t.length; o < i; o++) {\n          t[o] == e ? r = o : t[o] > e && t[o]--;\n        }\n\n        -1 != r && n === a && t.splice(r, 1);\n      }\n\n      function nt(t, e, n, r) {\n        var o,\n            i,\n            s = t.aoData[e],\n            l = function l(n, r) {\n          for (; n.childNodes.length;) {\n            n.removeChild(n.firstChild);\n          }\n\n          n.innerHTML = G(t, e, r, \"display\");\n        };\n\n        if (\"dom\" !== n && (n && \"auto\" !== n || \"dom\" !== s.src)) {\n          var u = s.anCells;\n          if (u) if (r !== a) l(u[r], r);else for (o = 0, i = u.length; o < i; o++) {\n            l(u[o], o);\n          }\n        } else s._aData = rt(t, s, r, r === a ? a : s._aData).data;\n\n        s._aSortData = null, s._aFilterData = null;\n        var c = t.aoColumns;\n        if (r !== a) c[r].sType = null;else {\n          for (o = 0, i = c.length; o < i; o++) {\n            c[o].sType = null;\n          }\n\n          ot(t, s);\n        }\n      }\n\n      function rt(e, n, r, o) {\n        var i,\n            s,\n            l,\n            u = [],\n            c = n.firstChild,\n            f = 0,\n            d = e.aoColumns,\n            h = e._rowReadObject;\n        o = o !== a ? o : h ? {} : [];\n\n        var p = function p(t, e) {\n          if (\"string\" == typeof t) {\n            var n = t.indexOf(\"@\");\n\n            if (-1 !== n) {\n              var r = t.substring(n + 1);\n              Q(t)(o, e.getAttribute(r));\n            }\n          }\n        },\n            g = function g(e) {\n          r !== a && r !== f || (s = d[f], l = t.trim(e.innerHTML), s && s._bAttrSrc ? (Q(s.mData._)(o, l), p(s.mData.sort, e), p(s.mData.type, e), p(s.mData.filter, e)) : h ? (s._setter || (s._setter = Q(s.mData)), s._setter(o, l)) : o[f] = l), f++;\n        };\n\n        if (c) for (; c;) {\n          \"TD\" != (i = c.nodeName.toUpperCase()) && \"TH\" != i || (g(c), u.push(c)), c = c.nextSibling;\n        } else for (var v = 0, b = (u = n.anCells).length; v < b; v++) {\n          g(u[v]);\n        }\n        var y = n.firstChild ? n : n.nTr;\n\n        if (y) {\n          var m = y.getAttribute(\"id\");\n          m && Q(e.rowId)(o, m);\n        }\n\n        return {\n          data: o,\n          cells: u\n        };\n      }\n\n      function at(e, r, a, o) {\n        var i,\n            s,\n            l,\n            u,\n            c,\n            f = e.aoData[r],\n            d = f._aData,\n            h = [];\n\n        if (null === f.nTr) {\n          for (i = a || n.createElement(\"tr\"), f.nTr = i, f.anCells = h, i._DT_RowIndex = r, ot(e, f), u = 0, c = e.aoColumns.length; u < c; u++) {\n            l = e.aoColumns[u], (s = a ? o[u] : n.createElement(l.sCellType))._DT_CellIndex = {\n              row: r,\n              column: u\n            }, h.push(s), a && !l.mRender && l.mData === u || t.isPlainObject(l.mData) && l.mData._ === u + \".display\" || (s.innerHTML = G(e, r, u, \"display\")), l.sClass && (s.className += \" \" + l.sClass), l.bVisible && !a ? i.appendChild(s) : !l.bVisible && a && s.parentNode.removeChild(s), l.fnCreatedCell && l.fnCreatedCell.call(e.oInstance, s, G(e, r, u), d, r, u);\n          }\n\n          de(e, \"aoRowCreatedCallback\", null, [i, d, r, h]);\n        }\n\n        f.nTr.setAttribute(\"role\", \"row\");\n      }\n\n      function ot(e, n) {\n        var r = n.nTr,\n            a = n._aData;\n\n        if (r) {\n          var o = e.rowIdFn(a);\n\n          if (o && (r.id = o), a.DT_RowClass) {\n            var i = a.DT_RowClass.split(\" \");\n            n.__rowc = n.__rowc ? C(n.__rowc.concat(i)) : i, t(r).removeClass(n.__rowc.join(\" \")).addClass(a.DT_RowClass);\n          }\n\n          a.DT_RowAttr && t(r).attr(a.DT_RowAttr), a.DT_RowData && t(r).data(a.DT_RowData);\n        }\n      }\n\n      function it(e) {\n        var n,\n            r,\n            a,\n            o,\n            i,\n            s = e.nTHead,\n            l = e.nTFoot,\n            u = 0 === t(\"th, td\", s).length,\n            c = e.oClasses,\n            f = e.aoColumns;\n\n        for (u && (o = t(\"<tr/>\").appendTo(s)), n = 0, r = f.length; n < r; n++) {\n          i = f[n], a = t(i.nTh).addClass(i.sClass), u && a.appendTo(o), e.oFeatures.bSort && (a.addClass(i.sSortingClass), !1 !== i.bSortable && (a.attr(\"tabindex\", e.iTabIndex).attr(\"aria-controls\", e.sTableId), ee(e, i.nTh, n))), i.sTitle != a[0].innerHTML && a.html(i.sTitle), pe(e, \"header\")(e, a, i, c);\n        }\n\n        if (u && ft(e.aoHeader, s), t(s).find(\">tr\").attr(\"role\", \"row\"), t(s).find(\">tr>th, >tr>td\").addClass(c.sHeaderTH), t(l).find(\">tr>th, >tr>td\").addClass(c.sFooterTH), null !== l) {\n          var d = e.aoFooter[0];\n\n          for (n = 0, r = d.length; n < r; n++) {\n            (i = f[n]).nTf = d[n].cell, i.sClass && t(i.nTf).addClass(i.sClass);\n          }\n        }\n      }\n\n      function st(e, n, r) {\n        var o,\n            i,\n            s,\n            l,\n            u,\n            c,\n            f,\n            d,\n            h,\n            p = [],\n            g = [],\n            v = e.aoColumns.length;\n\n        if (n) {\n          for (r === a && (r = !1), o = 0, i = n.length; o < i; o++) {\n            for (p[o] = n[o].slice(), p[o].nTr = n[o].nTr, s = v - 1; s >= 0; s--) {\n              e.aoColumns[s].bVisible || r || p[o].splice(s, 1);\n            }\n\n            g.push([]);\n          }\n\n          for (o = 0, i = p.length; o < i; o++) {\n            if (f = p[o].nTr) for (; c = f.firstChild;) {\n              f.removeChild(c);\n            }\n\n            for (s = 0, l = p[o].length; s < l; s++) {\n              if (d = 1, h = 1, g[o][s] === a) {\n                for (f.appendChild(p[o][s].cell), g[o][s] = 1; p[o + d] !== a && p[o][s].cell == p[o + d][s].cell;) {\n                  g[o + d][s] = 1, d++;\n                }\n\n                for (; p[o][s + h] !== a && p[o][s].cell == p[o][s + h].cell;) {\n                  for (u = 0; u < d; u++) {\n                    g[o + u][s + h] = 1;\n                  }\n\n                  h++;\n                }\n\n                t(p[o][s].cell).attr(\"rowspan\", d).attr(\"colspan\", h);\n              }\n            }\n          }\n        }\n      }\n\n      function lt(e) {\n        var n = de(e, \"aoPreDrawCallback\", \"preDraw\", [e]);\n\n        if (-1 === t.inArray(!1, n)) {\n          var r = [],\n              o = 0,\n              i = e.asStripeClasses,\n              s = i.length,\n              l = (e.aoOpenRows.length, e.oLanguage),\n              u = e.iInitDisplayStart,\n              c = \"ssp\" == ge(e),\n              f = e.aiDisplay;\n          e.bDrawing = !0, u !== a && -1 !== u && (e._iDisplayStart = c ? u : u >= e.fnRecordsDisplay() ? 0 : u, e.iInitDisplayStart = -1);\n          var d = e._iDisplayStart,\n              h = e.fnDisplayEnd();\n          if (e.bDeferLoading) e.bDeferLoading = !1, e.iDraw++, Wt(e, !1);else if (c) {\n            if (!e.bDestroying && !pt(e)) return;\n          } else e.iDraw++;\n          if (0 !== f.length) for (var p = c ? 0 : d, g = c ? e.aoData.length : h, v = p; v < g; v++) {\n            var b = f[v],\n                y = e.aoData[b];\n            null === y.nTr && at(e, b);\n            var m = y.nTr;\n\n            if (0 !== s) {\n              var S = i[o % s];\n              y._sRowStripe != S && (t(m).removeClass(y._sRowStripe).addClass(S), y._sRowStripe = S);\n            }\n\n            de(e, \"aoRowCallback\", null, [m, y._aData, o, v, b]), r.push(m), o++;\n          } else {\n            var x = l.sZeroRecords;\n            1 == e.iDraw && \"ajax\" == ge(e) ? x = l.sLoadingRecords : l.sEmptyTable && 0 === e.fnRecordsTotal() && (x = l.sEmptyTable), r[0] = t(\"<tr/>\", {\n              \"class\": s ? i[0] : \"\"\n            }).append(t(\"<td />\", {\n              valign: \"top\",\n              colSpan: W(e),\n              \"class\": e.oClasses.sRowEmpty\n            }).html(x))[0];\n          }\n          de(e, \"aoHeaderCallback\", \"header\", [t(e.nTHead).children(\"tr\")[0], K(e), d, h, f]), de(e, \"aoFooterCallback\", \"footer\", [t(e.nTFoot).children(\"tr\")[0], K(e), d, h, f]);\n          var D = t(e.nTBody);\n          D.children().detach(), D.append(t(r)), de(e, \"aoDrawCallback\", \"draw\", [e]), e.bSorted = !1, e.bFiltered = !1, e.bDrawing = !1;\n        } else Wt(e, !1);\n      }\n\n      function ut(t, e) {\n        var n = t.oFeatures,\n            r = n.bSort,\n            a = n.bFilter;\n        r && Qt(t), a ? mt(t, t.oPreviousSearch) : t.aiDisplay = t.aiDisplayMaster.slice(), !0 !== e && (t._iDisplayStart = 0), t._drawHold = e, lt(t), t._drawHold = !1;\n      }\n\n      function ct(e) {\n        var n = e.oClasses,\n            r = t(e.nTable),\n            a = t(\"<div/>\").insertBefore(r),\n            o = e.oFeatures,\n            i = t(\"<div/>\", {\n          id: e.sTableId + \"_wrapper\",\n          \"class\": n.sWrapper + (e.nTFoot ? \"\" : \" \" + n.sNoFooter)\n        });\n        e.nHolding = a[0], e.nTableWrapper = i[0], e.nTableReinsertBefore = e.nTable.nextSibling;\n\n        for (var s, l, c, f, d, h, p = e.sDom.split(\"\"), g = 0; g < p.length; g++) {\n          if (s = null, \"<\" == (l = p[g])) {\n            if (c = t(\"<div/>\")[0], \"'\" == (f = p[g + 1]) || '\"' == f) {\n              for (d = \"\", h = 2; p[g + h] != f;) {\n                d += p[g + h], h++;\n              }\n\n              if (\"H\" == d ? d = n.sJUIHeader : \"F\" == d && (d = n.sJUIFooter), -1 != d.indexOf(\".\")) {\n                var v = d.split(\".\");\n                c.id = v[0].substr(1, v[0].length - 1), c.className = v[1];\n              } else \"#\" == d.charAt(0) ? c.id = d.substr(1, d.length - 1) : c.className = d;\n\n              g += h;\n            }\n\n            i.append(c), i = t(c);\n          } else if (\">\" == l) i = i.parent();else if (\"l\" == l && o.bPaginate && o.bLengthChange) s = Nt(e);else if (\"f\" == l && o.bFilter) s = yt(e);else if (\"r\" == l && o.bProcessing) s = Ht(e);else if (\"t\" == l) s = Bt(e);else if (\"i\" == l && o.bInfo) s = Ft(e);else if (\"p\" == l && o.bPaginate) s = kt(e);else if (0 !== u.ext.feature.length) for (var b = u.ext.feature, y = 0, m = b.length; y < m; y++) {\n            if (l == b[y].cFeature) {\n              s = b[y].fnInit(e);\n              break;\n            }\n          }\n\n          if (s) {\n            var S = e.aanFeatures;\n            S[l] || (S[l] = []), S[l].push(s), i.append(s);\n          }\n        }\n\n        a.replaceWith(i), e.nHolding = null;\n      }\n\n      function ft(e, n) {\n        var r,\n            a,\n            o,\n            i,\n            s,\n            l,\n            u,\n            c,\n            f,\n            d,\n            h = t(n).children(\"tr\"),\n            p = function p(t, e, n) {\n          for (var r = t[e]; r[n];) {\n            n++;\n          }\n\n          return n;\n        };\n\n        for (e.splice(0, e.length), o = 0, l = h.length; o < l; o++) {\n          e.push([]);\n        }\n\n        for (o = 0, l = h.length; o < l; o++) {\n          for (a = (r = h[o]).firstChild; a;) {\n            if (\"TD\" == a.nodeName.toUpperCase() || \"TH\" == a.nodeName.toUpperCase()) for (c = (c = 1 * a.getAttribute(\"colspan\")) && 0 !== c && 1 !== c ? c : 1, f = (f = 1 * a.getAttribute(\"rowspan\")) && 0 !== f && 1 !== f ? f : 1, u = p(e, o, 0), d = 1 === c, s = 0; s < c; s++) {\n              for (i = 0; i < f; i++) {\n                e[o + i][u + s] = {\n                  cell: a,\n                  unique: d\n                }, e[o + i].nTr = r;\n              }\n            }\n            a = a.nextSibling;\n          }\n        }\n      }\n\n      function dt(t, e, n) {\n        var r = [];\n        n || (n = t.aoHeader, e && ft(n = [], e));\n\n        for (var a = 0, o = n.length; a < o; a++) {\n          for (var i = 0, s = n[a].length; i < s; i++) {\n            !n[a][i].unique || r[i] && t.bSortCellsTop || (r[i] = n[a][i].cell);\n          }\n        }\n\n        return r;\n      }\n\n      function ht(e, n, r) {\n        if (de(e, \"aoServerParams\", \"serverParams\", [n]), n && t.isArray(n)) {\n          var a = {},\n              o = /(.*?)\\[\\]$/;\n          t.each(n, function (t, e) {\n            var n = e.name.match(o);\n\n            if (n) {\n              var r = n[0];\n              a[r] || (a[r] = []), a[r].push(e.value);\n            } else a[e.name] = e.value;\n          }), n = a;\n        }\n\n        var i,\n            s = e.ajax,\n            l = e.oInstance,\n            u = function u(t) {\n          de(e, null, \"xhr\", [e, t, e.jqXHR]), r(t);\n        };\n\n        if (t.isPlainObject(s) && s.data) {\n          var c = \"function\" == typeof (i = s.data) ? i(n, e) : i;\n          n = \"function\" == typeof i && c ? c : t.extend(!0, n, c), delete s.data;\n        }\n\n        var f = {\n          data: n,\n          success: function success(t) {\n            var n = t.error || t.sError;\n            n && se(e, 0, n), e.json = t, u(t);\n          },\n          dataType: \"json\",\n          cache: !1,\n          type: e.sServerMethod,\n          error: function error(n, r, a) {\n            var o = de(e, null, \"xhr\", [e, null, e.jqXHR]);\n            -1 === t.inArray(!0, o) && (\"parsererror\" == r ? se(e, 0, \"Invalid JSON response\", 1) : 4 === n.readyState && se(e, 0, \"Ajax error\", 7)), Wt(e, !1);\n          }\n        };\n        e.oAjaxData = n, de(e, null, \"preXhr\", [e, n]), e.fnServerData ? e.fnServerData.call(l, e.sAjaxSource, t.map(n, function (t, e) {\n          return {\n            name: e,\n            value: t\n          };\n        }), u, e) : e.sAjaxSource || \"string\" == typeof s ? e.jqXHR = t.ajax(t.extend(f, {\n          url: s || e.sAjaxSource\n        })) : \"function\" == typeof s ? e.jqXHR = s.call(l, n, u, e) : (e.jqXHR = t.ajax(t.extend(f, s)), s.data = i);\n      }\n\n      function pt(t) {\n        return !t.bAjaxDataGet || (t.iDraw++, Wt(t, !0), ht(t, gt(t), function (e) {\n          vt(t, e);\n        }), !1);\n      }\n\n      function gt(e) {\n        var n,\n            r,\n            a,\n            o,\n            i = e.aoColumns,\n            s = i.length,\n            l = e.oFeatures,\n            c = e.oPreviousSearch,\n            f = e.aoPreSearchCols,\n            d = [],\n            h = Zt(e),\n            p = e._iDisplayStart,\n            g = !1 !== l.bPaginate ? e._iDisplayLength : -1,\n            v = function v(t, e) {\n          d.push({\n            name: t,\n            value: e\n          });\n        };\n\n        v(\"sEcho\", e.iDraw), v(\"iColumns\", s), v(\"sColumns\", x(i, \"sName\").join(\",\")), v(\"iDisplayStart\", p), v(\"iDisplayLength\", g);\n        var b = {\n          draw: e.iDraw,\n          columns: [],\n          order: [],\n          start: p,\n          length: g,\n          search: {\n            value: c.sSearch,\n            regex: c.bRegex\n          }\n        };\n\n        for (n = 0; n < s; n++) {\n          a = i[n], o = f[n], r = \"function\" == typeof a.mData ? \"function\" : a.mData, b.columns.push({\n            data: r,\n            name: a.sName,\n            searchable: a.bSearchable,\n            orderable: a.bSortable,\n            search: {\n              value: o.sSearch,\n              regex: o.bRegex\n            }\n          }), v(\"mDataProp_\" + n, r), l.bFilter && (v(\"sSearch_\" + n, o.sSearch), v(\"bRegex_\" + n, o.bRegex), v(\"bSearchable_\" + n, a.bSearchable)), l.bSort && v(\"bSortable_\" + n, a.bSortable);\n        }\n\n        l.bFilter && (v(\"sSearch\", c.sSearch), v(\"bRegex\", c.bRegex)), l.bSort && (t.each(h, function (t, e) {\n          b.order.push({\n            column: e.col,\n            dir: e.dir\n          }), v(\"iSortCol_\" + t, e.col), v(\"sSortDir_\" + t, e.dir);\n        }), v(\"iSortingCols\", h.length));\n        var y = u.ext.legacy.ajax;\n        return null === y ? e.sAjaxSource ? d : b : y ? d : b;\n      }\n\n      function vt(t, e) {\n        var n = function n(t, _n) {\n          return e[t] !== a ? e[t] : e[_n];\n        },\n            r = bt(t, e),\n            o = n(\"sEcho\", \"draw\"),\n            i = n(\"iTotalRecords\", \"recordsTotal\"),\n            s = n(\"iTotalDisplayRecords\", \"recordsFiltered\");\n\n        if (o) {\n          if (1 * o < t.iDraw) return;\n          t.iDraw = 1 * o;\n        }\n\n        tt(t), t._iRecordsTotal = parseInt(i, 10), t._iRecordsDisplay = parseInt(s, 10);\n\n        for (var l = 0, u = r.length; l < u; l++) {\n          J(t, r[l]);\n        }\n\n        t.aiDisplay = t.aiDisplayMaster.slice(), t.bAjaxDataGet = !1, lt(t), t._bInitComplete || Ot(t, e), t.bAjaxDataGet = !0, Wt(t, !1);\n      }\n\n      function bt(e, n) {\n        var r = t.isPlainObject(e.ajax) && e.ajax.dataSrc !== a ? e.ajax.dataSrc : e.sAjaxDataProp;\n        return \"data\" === r ? n.aaData || n[r] : \"\" !== r ? Z(r)(n) : n;\n      }\n\n      function yt(e) {\n        var r = e.oClasses,\n            a = e.sTableId,\n            o = e.oLanguage,\n            i = e.oPreviousSearch,\n            s = e.aanFeatures,\n            l = '<input type=\"search\" class=\"' + r.sFilterInput + '\"/>',\n            u = o.sSearch;\n        u = u.match(/_INPUT_/) ? u.replace(\"_INPUT_\", l) : u + l;\n\n        var c = t(\"<div/>\", {\n          id: s.f ? null : a + \"_filter\",\n          \"class\": r.sFilter\n        }).append(t(\"<label/>\").append(u)),\n            f = function f() {\n          s.f;\n          var t = this.value ? this.value : \"\";\n          t != i.sSearch && (mt(e, {\n            sSearch: t,\n            bRegex: i.bRegex,\n            bSmart: i.bSmart,\n            bCaseInsensitive: i.bCaseInsensitive\n          }), e._iDisplayStart = 0, lt(e));\n        },\n            d = null !== e.searchDelay ? e.searchDelay : \"ssp\" === ge(e) ? 400 : 0,\n            h = t(\"input\", c).val(i.sSearch).attr(\"placeholder\", o.sSearchPlaceholder).on(\"keyup.DT search.DT input.DT paste.DT cut.DT\", d ? Gt(f, d) : f).on(\"keypress.DT\", function (t) {\n          if (13 == t.keyCode) return !1;\n        }).attr(\"aria-controls\", a);\n\n        return t(e.nTable).on(\"search.dt.DT\", function (t, r) {\n          if (e === r) try {\n            h[0] !== n.activeElement && h.val(i.sSearch);\n          } catch (t) {}\n        }), c[0];\n      }\n\n      function mt(t, e, n) {\n        var r = t.oPreviousSearch,\n            o = t.aoPreSearchCols,\n            i = function i(t) {\n          r.sSearch = t.sSearch, r.bRegex = t.bRegex, r.bSmart = t.bSmart, r.bCaseInsensitive = t.bCaseInsensitive;\n        },\n            s = function s(t) {\n          return t.bEscapeRegex !== a ? !t.bEscapeRegex : t.bRegex;\n        };\n\n        if (U(t), \"ssp\" != ge(t)) {\n          Dt(t, e.sSearch, n, s(e), e.bSmart, e.bCaseInsensitive), i(e);\n\n          for (var l = 0; l < o.length; l++) {\n            xt(t, o[l].sSearch, l, s(o[l]), o[l].bSmart, o[l].bCaseInsensitive);\n          }\n\n          St(t);\n        } else i(e);\n\n        t.bFiltered = !0, de(t, null, \"search\", [t]);\n      }\n\n      function St(e) {\n        for (var n, r, a = u.ext.search, o = e.aiDisplay, i = 0, s = a.length; i < s; i++) {\n          for (var l = [], c = 0, f = o.length; c < f; c++) {\n            r = o[c], n = e.aoData[r], a[i](e, n._aFilterData, r, n._aData, c) && l.push(r);\n          }\n\n          o.length = 0, t.merge(o, l);\n        }\n      }\n\n      function xt(t, e, n, r, a, o) {\n        if (\"\" !== e) {\n          for (var i, s = [], l = t.aiDisplay, u = wt(e, r, a, o), c = 0; c < l.length; c++) {\n            i = t.aoData[l[c]]._aFilterData[n], u.test(i) && s.push(l[c]);\n          }\n\n          t.aiDisplay = s;\n        }\n      }\n\n      function Dt(t, e, n, r, a, o) {\n        var i,\n            s,\n            l,\n            c = wt(e, r, a, o),\n            f = t.oPreviousSearch.sSearch,\n            d = t.aiDisplayMaster,\n            h = [];\n        if (0 !== u.ext.search.length && (n = !0), s = It(t), e.length <= 0) t.aiDisplay = d.slice();else {\n          for ((s || n || f.length > e.length || 0 !== e.indexOf(f) || t.bSorted) && (t.aiDisplay = d.slice()), i = t.aiDisplay, l = 0; l < i.length; l++) {\n            c.test(t.aoData[i[l]]._sFilterRow) && h.push(i[l]);\n          }\n\n          t.aiDisplay = h;\n        }\n      }\n\n      function wt(e, n, r, a) {\n        if (e = n ? e : _t(e), r) {\n          var o = t.map(e.match(/\"[^\"]+\"|[^ ]+/g) || [\"\"], function (t) {\n            if ('\"' === t.charAt(0)) {\n              var e = t.match(/^\"(.*)\"$/);\n              t = e ? e[1] : t;\n            }\n\n            return t.replace('\"', \"\");\n          });\n          e = \"^(?=.*?\" + o.join(\")(?=.*?\") + \").*$\";\n        }\n\n        return new RegExp(e, a ? \"i\" : \"\");\n      }\n\n      var _t = u.util.escapeRegex,\n          Tt = t(\"<div>\")[0],\n          Ct = Tt.textContent !== a;\n\n      function It(t) {\n        var e,\n            n,\n            r,\n            a,\n            o,\n            i,\n            s,\n            l,\n            c = t.aoColumns,\n            f = u.ext.type.search,\n            d = !1;\n\n        for (n = 0, a = t.aoData.length; n < a; n++) {\n          if (!(l = t.aoData[n])._aFilterData) {\n            for (i = [], r = 0, o = c.length; r < o; r++) {\n              (e = c[r]).bSearchable ? (s = G(t, n, r, \"filter\"), f[e.sType] && (s = f[e.sType](s)), null === s && (s = \"\"), \"string\" != typeof s && s.toString && (s = s.toString())) : s = \"\", s.indexOf && -1 !== s.indexOf(\"&\") && (Tt.innerHTML = s, s = Ct ? Tt.textContent : Tt.innerText), s.replace && (s = s.replace(/[\\r\\n]/g, \"\")), i.push(s);\n            }\n\n            l._aFilterData = i, l._sFilterRow = i.join(\"  \"), d = !0;\n          }\n        }\n\n        return d;\n      }\n\n      function At(t) {\n        return {\n          search: t.sSearch,\n          smart: t.bSmart,\n          regex: t.bRegex,\n          caseInsensitive: t.bCaseInsensitive\n        };\n      }\n\n      function jt(t) {\n        return {\n          sSearch: t.search,\n          bSmart: t.smart,\n          bRegex: t.regex,\n          bCaseInsensitive: t.caseInsensitive\n        };\n      }\n\n      function Ft(e) {\n        var n = e.sTableId,\n            r = e.aanFeatures.i,\n            a = t(\"<div/>\", {\n          \"class\": e.oClasses.sInfo,\n          id: r ? null : n + \"_info\"\n        });\n        return r || (e.aoDrawCallback.push({\n          fn: Pt,\n          sName: \"information\"\n        }), a.attr(\"role\", \"status\").attr(\"aria-live\", \"polite\"), t(e.nTable).attr(\"aria-describedby\", n + \"_info\")), a[0];\n      }\n\n      function Pt(e) {\n        var n = e.aanFeatures.i;\n\n        if (0 !== n.length) {\n          var r = e.oLanguage,\n              a = e._iDisplayStart + 1,\n              o = e.fnDisplayEnd(),\n              i = e.fnRecordsTotal(),\n              s = e.fnRecordsDisplay(),\n              l = s ? r.sInfo : r.sInfoEmpty;\n          s !== i && (l += \" \" + r.sInfoFiltered), l = Lt(e, l += r.sInfoPostFix);\n          var u = r.fnInfoCallback;\n          null !== u && (l = u.call(e.oInstance, e, a, o, i, s, l)), t(n).html(l);\n        }\n      }\n\n      function Lt(t, e) {\n        var n = t.fnFormatNumber,\n            r = t._iDisplayStart + 1,\n            a = t._iDisplayLength,\n            o = t.fnRecordsDisplay(),\n            i = -1 === a;\n        return e.replace(/_START_/g, n.call(t, r)).replace(/_END_/g, n.call(t, t.fnDisplayEnd())).replace(/_MAX_/g, n.call(t, t.fnRecordsTotal())).replace(/_TOTAL_/g, n.call(t, o)).replace(/_PAGE_/g, n.call(t, i ? 1 : Math.ceil(r / a))).replace(/_PAGES_/g, n.call(t, i ? 1 : Math.ceil(o / a)));\n      }\n\n      function Rt(t) {\n        var e,\n            n,\n            r,\n            a = t.iInitDisplayStart,\n            o = t.aoColumns,\n            i = t.oFeatures,\n            s = t.bDeferLoading;\n\n        if (t.bInitialised) {\n          for (ct(t), it(t), st(t, t.aoHeader), st(t, t.aoFooter), Wt(t, !0), i.bAutoWidth && Xt(t), e = 0, n = o.length; e < n; e++) {\n            (r = o[e]).sWidth && (r.nTh.style.width = Yt(r.sWidth));\n          }\n\n          de(t, null, \"preInit\", [t]), ut(t);\n          var l = ge(t);\n          (\"ssp\" != l || s) && (\"ajax\" == l ? ht(t, [], function (n) {\n            var r = bt(t, n);\n\n            for (e = 0; e < r.length; e++) {\n              J(t, r[e]);\n            }\n\n            t.iInitDisplayStart = a, ut(t), Wt(t, !1), Ot(t, n);\n          }) : (Wt(t, !1), Ot(t)));\n        } else setTimeout(function () {\n          Rt(t);\n        }, 200);\n      }\n\n      function Ot(t, e) {\n        t._bInitComplete = !0, (e || t.oInit.aaData) && k(t), de(t, null, \"plugin-init\", [t, e]), de(t, \"aoInitComplete\", \"init\", [t, e]);\n      }\n\n      function Et(t, e) {\n        var n = parseInt(e, 10);\n        t._iDisplayLength = n, he(t), de(t, null, \"length\", [t, n]);\n      }\n\n      function Nt(e) {\n        for (var n = e.oClasses, r = e.sTableId, a = e.aLengthMenu, o = t.isArray(a[0]), i = o ? a[0] : a, s = o ? a[1] : a, l = t(\"<select/>\", {\n          name: r + \"_length\",\n          \"aria-controls\": r,\n          \"class\": n.sLengthSelect\n        }), u = 0, c = i.length; u < c; u++) {\n          l[0][u] = new Option(\"number\" == typeof s[u] ? e.fnFormatNumber(s[u]) : s[u], i[u]);\n        }\n\n        var f = t(\"<div><label/></div>\").addClass(n.sLength);\n        return e.aanFeatures.l || (f[0].id = r + \"_length\"), f.children().append(e.oLanguage.sLengthMenu.replace(\"_MENU_\", l[0].outerHTML)), t(\"select\", f).val(e._iDisplayLength).on(\"change.DT\", function (n) {\n          Et(e, t(this).val()), lt(e);\n        }), t(e.nTable).on(\"length.dt.DT\", function (n, r, a) {\n          e === r && t(\"select\", f).val(a);\n        }), f[0];\n      }\n\n      function kt(e) {\n        var n = e.sPaginationType,\n            r = u.ext.pager[n],\n            a = \"function\" == typeof r,\n            o = function o(t) {\n          lt(t);\n        },\n            i = t(\"<div/>\").addClass(e.oClasses.sPaging + n)[0],\n            s = e.aanFeatures;\n\n        return a || r.fnInit(e, i, o), s.p || (i.id = e.sTableId + \"_paginate\", e.aoDrawCallback.push({\n          fn: function fn(t) {\n            if (a) {\n              var e,\n                  n,\n                  i = t._iDisplayStart,\n                  l = t._iDisplayLength,\n                  u = t.fnRecordsDisplay(),\n                  c = -1 === l,\n                  f = c ? 0 : Math.ceil(i / l),\n                  d = c ? 1 : Math.ceil(u / l),\n                  h = r(f, d);\n\n              for (e = 0, n = s.p.length; e < n; e++) {\n                pe(t, \"pageButton\")(t, s.p[e], e, h, f, d);\n              }\n            } else r.fnUpdate(t, o);\n          },\n          sName: \"pagination\"\n        })), i;\n      }\n\n      function Mt(t, e, n) {\n        var r = t._iDisplayStart,\n            a = t._iDisplayLength,\n            o = t.fnRecordsDisplay();\n        0 === o || -1 === a ? r = 0 : \"number\" == typeof e ? (r = e * a) > o && (r = 0) : \"first\" == e ? r = 0 : \"previous\" == e ? (r = a >= 0 ? r - a : 0) < 0 && (r = 0) : \"next\" == e ? r + a < o && (r += a) : \"last\" == e ? r = Math.floor((o - 1) / a) * a : se(t, 0, \"Unknown paging action: \" + e, 5);\n        var i = t._iDisplayStart !== r;\n        return t._iDisplayStart = r, i && (de(t, null, \"page\", [t]), n && lt(t)), i;\n      }\n\n      function Ht(e) {\n        return t(\"<div/>\", {\n          id: e.aanFeatures.r ? null : e.sTableId + \"_processing\",\n          \"class\": e.oClasses.sProcessing\n        }).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0];\n      }\n\n      function Wt(e, n) {\n        e.oFeatures.bProcessing && t(e.aanFeatures.r).css(\"display\", n ? \"block\" : \"none\"), de(e, null, \"processing\", [e, n]);\n      }\n\n      function Bt(e) {\n        var n = t(e.nTable);\n        n.attr(\"role\", \"grid\");\n        var r = e.oScroll;\n        if (\"\" === r.sX && \"\" === r.sY) return e.nTable;\n\n        var a = r.sX,\n            o = r.sY,\n            i = e.oClasses,\n            s = n.children(\"caption\"),\n            l = s.length ? s[0]._captionSide : null,\n            u = t(n[0].cloneNode(!1)),\n            c = t(n[0].cloneNode(!1)),\n            f = n.children(\"tfoot\"),\n            d = \"<div/>\",\n            h = function h(t) {\n          return t ? Yt(t) : null;\n        };\n\n        f.length || (f = null);\n        var p = t(d, {\n          \"class\": i.sScrollWrapper\n        }).append(t(d, {\n          \"class\": i.sScrollHead\n        }).css({\n          overflow: \"hidden\",\n          position: \"relative\",\n          border: 0,\n          width: a ? h(a) : \"100%\"\n        }).append(t(d, {\n          \"class\": i.sScrollHeadInner\n        }).css({\n          \"box-sizing\": \"content-box\",\n          width: r.sXInner || \"100%\"\n        }).append(u.removeAttr(\"id\").css(\"margin-left\", 0).append(\"top\" === l ? s : null).append(n.children(\"thead\"))))).append(t(d, {\n          \"class\": i.sScrollBody\n        }).css({\n          position: \"relative\",\n          overflow: \"auto\",\n          width: h(a)\n        }).append(n));\n        f && p.append(t(d, {\n          \"class\": i.sScrollFoot\n        }).css({\n          overflow: \"hidden\",\n          border: 0,\n          width: a ? h(a) : \"100%\"\n        }).append(t(d, {\n          \"class\": i.sScrollFootInner\n        }).append(c.removeAttr(\"id\").css(\"margin-left\", 0).append(\"bottom\" === l ? s : null).append(n.children(\"tfoot\")))));\n        var g = p.children(),\n            v = g[0],\n            b = g[1],\n            y = f ? g[2] : null;\n        return a && t(b).on(\"scroll.DT\", function (t) {\n          var e = this.scrollLeft;\n          v.scrollLeft = e, f && (y.scrollLeft = e);\n        }), t(b).css(o && r.bCollapse ? \"max-height\" : \"height\", o), e.nScrollHead = v, e.nScrollBody = b, e.nScrollFoot = y, e.aoDrawCallback.push({\n          fn: Ut,\n          sName: \"scrolling\"\n        }), p[0];\n      }\n\n      function Ut(e) {\n        var n,\n            r,\n            o,\n            i,\n            s,\n            l,\n            u,\n            c,\n            f,\n            d = e.oScroll,\n            h = d.sX,\n            p = d.sXInner,\n            g = d.sY,\n            v = d.iBarWidth,\n            b = t(e.nScrollHead),\n            y = b[0].style,\n            m = b.children(\"div\"),\n            S = m[0].style,\n            D = m.children(\"table\"),\n            w = e.nScrollBody,\n            _ = t(w),\n            T = w.style,\n            C = t(e.nScrollFoot).children(\"div\"),\n            I = C.children(\"table\"),\n            A = t(e.nTHead),\n            j = t(e.nTable),\n            F = j[0],\n            P = F.style,\n            L = e.nTFoot ? t(e.nTFoot) : null,\n            R = e.oBrowser,\n            O = R.bScrollOversize,\n            E = x(e.aoColumns, \"nTh\"),\n            N = [],\n            H = [],\n            W = [],\n            B = [],\n            U = function U(t) {\n          var e = t.style;\n          e.paddingTop = \"0\", e.paddingBottom = \"0\", e.borderTopWidth = \"0\", e.borderBottomWidth = \"0\", e.height = 0;\n        },\n            V = w.scrollHeight > w.clientHeight;\n\n        if (e.scrollBarVis !== V && e.scrollBarVis !== a) return e.scrollBarVis = V, void k(e);\n        e.scrollBarVis = V, j.children(\"thead, tfoot\").remove(), L && (l = L.clone().prependTo(j), r = L.find(\"tr\"), i = l.find(\"tr\")), s = A.clone().prependTo(j), n = A.find(\"tr\"), o = s.find(\"tr\"), s.find(\"th, td\").removeAttr(\"tabindex\"), h || (T.width = \"100%\", b[0].style.width = \"100%\"), t.each(dt(e, s), function (t, n) {\n          u = M(e, t), n.style.width = e.aoColumns[u].sWidth;\n        }), L && Vt(function (t) {\n          t.style.width = \"\";\n        }, i), f = j.outerWidth(), \"\" === h ? (P.width = \"100%\", O && (j.find(\"tbody\").height() > w.offsetHeight || \"scroll\" == _.css(\"overflow-y\")) && (P.width = Yt(j.outerWidth() - v)), f = j.outerWidth()) : \"\" !== p && (P.width = Yt(p), f = j.outerWidth()), Vt(U, o), Vt(function (e) {\n          W.push(e.innerHTML), N.push(Yt(t(e).css(\"width\")));\n        }, o), Vt(function (e, n) {\n          -1 !== t.inArray(e, E) && (e.style.width = N[n]);\n        }, n), t(o).height(0), L && (Vt(U, i), Vt(function (e) {\n          B.push(e.innerHTML), H.push(Yt(t(e).css(\"width\")));\n        }, i), Vt(function (t, e) {\n          t.style.width = H[e];\n        }, r), t(i).height(0)), Vt(function (t, e) {\n          t.innerHTML = '<div class=\"dataTables_sizing\">' + W[e] + \"</div>\", t.childNodes[0].style.height = \"0\", t.childNodes[0].style.overflow = \"hidden\", t.style.width = N[e];\n        }, o), L && Vt(function (t, e) {\n          t.innerHTML = '<div class=\"dataTables_sizing\">' + B[e] + \"</div>\", t.childNodes[0].style.height = \"0\", t.childNodes[0].style.overflow = \"hidden\", t.style.width = H[e];\n        }, i), j.outerWidth() < f ? (c = w.scrollHeight > w.offsetHeight || \"scroll\" == _.css(\"overflow-y\") ? f + v : f, O && (w.scrollHeight > w.offsetHeight || \"scroll\" == _.css(\"overflow-y\")) && (P.width = Yt(c - v)), \"\" !== h && \"\" === p || se(e, 1, \"Possible column misalignment\", 6)) : c = \"100%\", T.width = Yt(c), y.width = Yt(c), L && (e.nScrollFoot.style.width = Yt(c)), g || O && (T.height = Yt(F.offsetHeight + v));\n        var J = j.outerWidth();\n        D[0].style.width = Yt(J), S.width = Yt(J);\n\n        var X = j.height() > w.clientHeight || \"scroll\" == _.css(\"overflow-y\"),\n            G = \"padding\" + (R.bScrollbarLeft ? \"Left\" : \"Right\");\n\n        S[G] = X ? v + \"px\" : \"0px\", L && (I[0].style.width = Yt(J), C[0].style.width = Yt(J), C[0].style[G] = X ? v + \"px\" : \"0px\"), j.children(\"colgroup\").insertBefore(j.children(\"thead\")), _.scroll(), !e.bSorted && !e.bFiltered || e._drawHold || (w.scrollTop = 0);\n      }\n\n      function Vt(t, e, n) {\n        for (var r, a, o = 0, i = 0, s = e.length; i < s;) {\n          for (r = e[i].firstChild, a = n ? n[i].firstChild : null; r;) {\n            1 === r.nodeType && (n ? t(r, a, o) : t(r, o), o++), r = r.nextSibling, a = n ? a.nextSibling : null;\n          }\n\n          i++;\n        }\n      }\n\n      var Jt = /<.*?>/g;\n\n      function Xt(n) {\n        var r,\n            a,\n            o,\n            i = n.nTable,\n            s = n.aoColumns,\n            l = n.oScroll,\n            u = l.sY,\n            c = l.sX,\n            f = l.sXInner,\n            d = s.length,\n            h = B(n, \"bVisible\"),\n            p = t(\"th\", n.nTHead),\n            g = i.getAttribute(\"width\"),\n            v = i.parentNode,\n            b = !1,\n            y = n.oBrowser,\n            m = y.bScrollOversize,\n            S = i.style.width;\n\n        for (S && -1 !== S.indexOf(\"%\") && (g = S), r = 0; r < h.length; r++) {\n          null !== (a = s[h[r]]).sWidth && (a.sWidth = $t(a.sWidthOrig, v), b = !0);\n        }\n\n        if (m || !b && !c && !u && d == W(n) && d == p.length) for (r = 0; r < d; r++) {\n          var x = M(n, r);\n          null !== x && (s[x].sWidth = Yt(p.eq(r).width()));\n        } else {\n          var D = t(i).clone().css(\"visibility\", \"hidden\").removeAttr(\"id\");\n          D.find(\"tbody tr\").remove();\n          var w = t(\"<tr/>\").appendTo(D.find(\"tbody\"));\n\n          for (D.find(\"thead, tfoot\").remove(), D.append(t(n.nTHead).clone()).append(t(n.nTFoot).clone()), D.find(\"tfoot th, tfoot td\").css(\"width\", \"\"), p = dt(n, D.find(\"thead\")[0]), r = 0; r < h.length; r++) {\n            a = s[h[r]], p[r].style.width = null !== a.sWidthOrig && \"\" !== a.sWidthOrig ? Yt(a.sWidthOrig) : \"\", a.sWidthOrig && c && t(p[r]).append(t(\"<div/>\").css({\n              width: a.sWidthOrig,\n              margin: 0,\n              padding: 0,\n              border: 0,\n              height: 1\n            }));\n          }\n\n          if (n.aoData.length) for (r = 0; r < h.length; r++) {\n            a = s[o = h[r]], t(qt(n, o)).clone(!1).append(a.sContentPadding).appendTo(w);\n          }\n          t(\"[name]\", D).removeAttr(\"name\");\n\n          var _ = t(\"<div/>\").css(c || u ? {\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            height: 1,\n            right: 0,\n            overflow: \"hidden\"\n          } : {}).append(D).appendTo(v);\n\n          c && f ? D.width(f) : c ? (D.css(\"width\", \"auto\"), D.removeAttr(\"width\"), D.width() < v.clientWidth && g && D.width(v.clientWidth)) : u ? D.width(v.clientWidth) : g && D.width(g);\n          var T = 0;\n\n          for (r = 0; r < h.length; r++) {\n            var C = t(p[r]),\n                I = C.outerWidth() - C.width(),\n                A = y.bBounding ? Math.ceil(p[r].getBoundingClientRect().width) : C.outerWidth();\n            T += A, s[h[r]].sWidth = Yt(A - I);\n          }\n\n          i.style.width = Yt(T), _.remove();\n        }\n\n        if (g && (i.style.width = Yt(g)), (g || c) && !n._reszEvt) {\n          var j = function j() {\n            t(_e3).on(\"resize.DT-\" + n.sInstance, Gt(function () {\n              k(n);\n            }));\n          };\n\n          m ? setTimeout(j, 1e3) : j(), n._reszEvt = !0;\n        }\n      }\n\n      var Gt = u.util.throttle;\n\n      function $t(e, r) {\n        if (!e) return 0;\n        var a = t(\"<div/>\").css(\"width\", Yt(e)).appendTo(r || n.body),\n            o = a[0].offsetWidth;\n        return a.remove(), o;\n      }\n\n      function qt(e, n) {\n        var r = zt(e, n);\n        if (r < 0) return null;\n        var a = e.aoData[r];\n        return a.nTr ? a.anCells[n] : t(\"<td/>\").html(G(e, r, n, \"display\"))[0];\n      }\n\n      function zt(t, e) {\n        for (var n, r = -1, a = -1, o = 0, i = t.aoData.length; o < i; o++) {\n          (n = (n = (n = G(t, o, e, \"display\") + \"\").replace(Jt, \"\")).replace(/&nbsp;/g, \" \")).length > r && (r = n.length, a = o);\n        }\n\n        return a;\n      }\n\n      function Yt(t) {\n        return null === t ? \"0px\" : \"number\" == typeof t ? t < 0 ? \"0px\" : t + \"px\" : t.match(/\\d$/) ? t + \"px\" : t;\n      }\n\n      function Zt(e) {\n        var n,\n            r,\n            o,\n            i,\n            s,\n            l,\n            c,\n            f = [],\n            d = e.aoColumns,\n            h = e.aaSortingFixed,\n            p = t.isPlainObject(h),\n            g = [],\n            v = function v(e) {\n          e.length && !t.isArray(e[0]) ? g.push(e) : t.merge(g, e);\n        };\n\n        for (t.isArray(h) && v(h), p && h.pre && v(h.pre), v(e.aaSorting), p && h.post && v(h.post), n = 0; n < g.length; n++) {\n          for (r = 0, o = (i = d[c = g[n][0]].aDataSort).length; r < o; r++) {\n            l = d[s = i[r]].sType || \"string\", g[n]._idx === a && (g[n]._idx = t.inArray(g[n][1], d[s].asSorting)), f.push({\n              src: c,\n              col: s,\n              dir: g[n][1],\n              index: g[n]._idx,\n              type: l,\n              formatter: u.ext.type.order[l + \"-pre\"]\n            });\n          }\n        }\n\n        return f;\n      }\n\n      function Qt(t) {\n        var e,\n            n,\n            r,\n            a,\n            o,\n            i = [],\n            s = u.ext.type.order,\n            l = t.aoData,\n            c = (t.aoColumns, 0),\n            f = t.aiDisplayMaster;\n\n        for (U(t), e = 0, n = (o = Zt(t)).length; e < n; e++) {\n          (a = o[e]).formatter && c++, re(t, a.col);\n        }\n\n        if (\"ssp\" != ge(t) && 0 !== o.length) {\n          for (e = 0, r = f.length; e < r; e++) {\n            i[f[e]] = e;\n          }\n\n          c === o.length ? f.sort(function (t, e) {\n            var n,\n                r,\n                a,\n                s,\n                u,\n                c = o.length,\n                f = l[t]._aSortData,\n                d = l[e]._aSortData;\n\n            for (a = 0; a < c; a++) {\n              if (0 != (s = (n = f[(u = o[a]).col]) < (r = d[u.col]) ? -1 : n > r ? 1 : 0)) return \"asc\" === u.dir ? s : -s;\n            }\n\n            return (n = i[t]) < (r = i[e]) ? -1 : n > r ? 1 : 0;\n          }) : f.sort(function (t, e) {\n            var n,\n                r,\n                a,\n                u,\n                c,\n                f = o.length,\n                d = l[t]._aSortData,\n                h = l[e]._aSortData;\n\n            for (a = 0; a < f; a++) {\n              if (n = d[(c = o[a]).col], r = h[c.col], 0 !== (u = (s[c.type + \"-\" + c.dir] || s[\"string-\" + c.dir])(n, r))) return u;\n            }\n\n            return (n = i[t]) < (r = i[e]) ? -1 : n > r ? 1 : 0;\n          });\n        }\n\n        t.bSorted = !0;\n      }\n\n      function Kt(t) {\n        for (var e, n, r = t.aoColumns, a = Zt(t), o = t.oLanguage.oAria, i = 0, s = r.length; i < s; i++) {\n          var l = r[i],\n              u = l.asSorting,\n              c = l.sTitle.replace(/<.*?>/g, \"\"),\n              f = l.nTh;\n          f.removeAttribute(\"aria-sort\"), l.bSortable ? (a.length > 0 && a[0].col == i ? (f.setAttribute(\"aria-sort\", \"asc\" == a[0].dir ? \"ascending\" : \"descending\"), n = u[a[0].index + 1] || u[0]) : n = u[0], e = c + (\"asc\" === n ? o.sSortAscending : o.sSortDescending)) : e = c, f.setAttribute(\"aria-label\", e);\n        }\n      }\n\n      function te(e, n, r, o) {\n        var i,\n            s = e.aoColumns[n],\n            l = e.aaSorting,\n            u = s.asSorting,\n            c = function c(e, n) {\n          var r = e._idx;\n          return r === a && (r = t.inArray(e[1], u)), r + 1 < u.length ? r + 1 : n ? null : 0;\n        };\n\n        if (\"number\" == typeof l[0] && (l = e.aaSorting = [l]), r && e.oFeatures.bSortMulti) {\n          var f = t.inArray(n, x(l, \"0\"));\n          -1 !== f ? (null === (i = c(l[f], !0)) && 1 === l.length && (i = 0), null === i ? l.splice(f, 1) : (l[f][1] = u[i], l[f]._idx = i)) : (l.push([n, u[0], 0]), l[l.length - 1]._idx = 0);\n        } else l.length && l[0][0] == n ? (i = c(l[0]), l.length = 1, l[0][1] = u[i], l[0]._idx = i) : (l.length = 0, l.push([n, u[0]]), l[0]._idx = 0);\n\n        ut(e), \"function\" == typeof o && o(e);\n      }\n\n      function ee(t, e, n, r) {\n        var a = t.aoColumns[n];\n        ce(e, {}, function (e) {\n          !1 !== a.bSortable && (t.oFeatures.bProcessing ? (Wt(t, !0), setTimeout(function () {\n            te(t, n, e.shiftKey, r), \"ssp\" !== ge(t) && Wt(t, !1);\n          }, 0)) : te(t, n, e.shiftKey, r));\n        });\n      }\n\n      function ne(e) {\n        var n,\n            r,\n            a,\n            o = e.aLastSort,\n            i = e.oClasses.sSortColumn,\n            s = Zt(e),\n            l = e.oFeatures;\n\n        if (l.bSort && l.bSortClasses) {\n          for (n = 0, r = o.length; n < r; n++) {\n            a = o[n].src, t(x(e.aoData, \"anCells\", a)).removeClass(i + (n < 2 ? n + 1 : 3));\n          }\n\n          for (n = 0, r = s.length; n < r; n++) {\n            a = s[n].src, t(x(e.aoData, \"anCells\", a)).addClass(i + (n < 2 ? n + 1 : 3));\n          }\n        }\n\n        e.aLastSort = s;\n      }\n\n      function re(t, e) {\n        var n,\n            r,\n            a,\n            o = t.aoColumns[e],\n            i = u.ext.order[o.sSortDataType];\n        i && (n = i.call(t.oInstance, t, e, H(t, e)));\n\n        for (var s = u.ext.type.order[o.sType + \"-pre\"], l = 0, c = t.aoData.length; l < c; l++) {\n          (r = t.aoData[l])._aSortData || (r._aSortData = []), r._aSortData[e] && !i || (a = i ? n[l] : G(t, l, e, \"sort\"), r._aSortData[e] = s ? s(a) : a);\n        }\n      }\n\n      function ae(e) {\n        if (e.oFeatures.bStateSave && !e.bDestroying) {\n          var n = {\n            time: +new Date(),\n            start: e._iDisplayStart,\n            length: e._iDisplayLength,\n            order: t.extend(!0, [], e.aaSorting),\n            search: At(e.oPreviousSearch),\n            columns: t.map(e.aoColumns, function (t, n) {\n              return {\n                visible: t.bVisible,\n                search: At(e.aoPreSearchCols[n])\n              };\n            })\n          };\n          de(e, \"aoStateSaveParams\", \"stateSaveParams\", [e, n]), e.oSavedState = n, e.fnStateSaveCallback.call(e.oInstance, e, n);\n        }\n      }\n\n      function oe(e, n, r) {\n        var o,\n            i,\n            s = e.aoColumns,\n            l = function l(n) {\n          if (n && n.time) {\n            var l = de(e, \"aoStateLoadParams\", \"stateLoadParams\", [e, n]);\n\n            if (-1 === t.inArray(!1, l)) {\n              var u = e.iStateDuration;\n              if (u > 0 && n.time < +new Date() - 1e3 * u) r();else if (n.columns && s.length !== n.columns.length) r();else {\n                if (e.oLoadedState = t.extend(!0, {}, n), n.start !== a && (e._iDisplayStart = n.start, e.iInitDisplayStart = n.start), n.length !== a && (e._iDisplayLength = n.length), n.order !== a && (e.aaSorting = [], t.each(n.order, function (t, n) {\n                  e.aaSorting.push(n[0] >= s.length ? [0, n[1]] : n);\n                })), n.search !== a && t.extend(e.oPreviousSearch, jt(n.search)), n.columns) for (o = 0, i = n.columns.length; o < i; o++) {\n                  var c = n.columns[o];\n                  c.visible !== a && (s[o].bVisible = c.visible), c.search !== a && t.extend(e.aoPreSearchCols[o], jt(c.search));\n                }\n                de(e, \"aoStateLoaded\", \"stateLoaded\", [e, n]), r();\n              }\n            } else r();\n          } else r();\n        };\n\n        if (e.oFeatures.bStateSave) {\n          var u = e.fnStateLoadCallback.call(e.oInstance, e, l);\n          u !== a && l(u);\n        } else r();\n      }\n\n      function ie(e) {\n        var n = u.settings,\n            r = t.inArray(e, x(n, \"nTable\"));\n        return -1 !== r ? n[r] : null;\n      }\n\n      function se(t, n, r, a) {\n        if (r = \"DataTables warning: \" + (t ? \"table id=\" + t.sTableId + \" - \" : \"\") + r, a && (r += \". For more information about this error, please see http://datatables.net/tn/\" + a), n) _e3.console && console.log && console.log(r);else {\n          var o = u.ext,\n              i = o.sErrMode || o.errMode;\n          if (t && de(t, null, \"error\", [t, a, r]), \"alert\" == i) alert(r);else {\n            if (\"throw\" == i) throw new Error(r);\n            \"function\" == typeof i && i(t, a, r);\n          }\n        }\n      }\n\n      function le(e, n, r, o) {\n        t.isArray(r) ? t.each(r, function (r, a) {\n          t.isArray(a) ? le(e, n, a[0], a[1]) : le(e, n, a);\n        }) : (o === a && (o = r), n[r] !== a && (e[o] = n[r]));\n      }\n\n      function ue(e, n, r) {\n        var a;\n\n        for (var o in n) {\n          n.hasOwnProperty(o) && (a = n[o], t.isPlainObject(a) ? (t.isPlainObject(e[o]) || (e[o] = {}), t.extend(!0, e[o], a)) : r && \"data\" !== o && \"aaData\" !== o && t.isArray(a) ? e[o] = a.slice() : e[o] = a);\n        }\n\n        return e;\n      }\n\n      function ce(e, n, r) {\n        t(e).on(\"click.DT\", n, function (n) {\n          t(e).blur(), r(n);\n        }).on(\"keypress.DT\", n, function (t) {\n          13 === t.which && (t.preventDefault(), r(t));\n        }).on(\"selectstart.DT\", function () {\n          return !1;\n        });\n      }\n\n      function fe(t, e, n, r) {\n        n && t[e].push({\n          fn: n,\n          sName: r\n        });\n      }\n\n      function de(e, n, r, a) {\n        var o = [];\n\n        if (n && (o = t.map(e[n].slice().reverse(), function (t, n) {\n          return t.fn.apply(e.oInstance, a);\n        })), null !== r) {\n          var i = t.Event(r + \".dt\");\n          t(e.nTable).trigger(i, a), o.push(i.result);\n        }\n\n        return o;\n      }\n\n      function he(t) {\n        var e = t._iDisplayStart,\n            n = t.fnDisplayEnd(),\n            r = t._iDisplayLength;\n        e >= n && (e = n - r), e -= e % r, (-1 === r || e < 0) && (e = 0), t._iDisplayStart = e;\n      }\n\n      function pe(e, n) {\n        var r = e.renderer,\n            a = u.ext.renderer[n];\n        return t.isPlainObject(r) && r[n] ? a[r[n]] || a._ : \"string\" == typeof r && a[r] || a._;\n      }\n\n      function ge(t) {\n        return t.oFeatures.bServerSide ? \"ssp\" : t.ajax || t.sAjaxSource ? \"ajax\" : \"dom\";\n      }\n\n      var ve = [],\n          be = Array.prototype;\n      _i = function i(e, n) {\n        if (!(this instanceof _i)) return new _i(e, n);\n\n        var r = [],\n            a = function a(e) {\n          var n = function (e) {\n            var n,\n                r,\n                a = u.settings,\n                o = t.map(a, function (t, e) {\n              return t.nTable;\n            });\n            return e ? e.nTable && e.oApi ? [e] : e.nodeName && \"table\" === e.nodeName.toLowerCase() ? -1 !== (n = t.inArray(e, o)) ? [a[n]] : null : e && \"function\" == typeof e.settings ? e.settings().toArray() : (\"string\" == typeof e ? r = t(e) : e instanceof t && (r = e), r ? r.map(function (e) {\n              return -1 !== (n = t.inArray(this, o)) ? a[n] : null;\n            }).toArray() : void 0) : [];\n          }(e);\n\n          n && (r = r.concat(n));\n        };\n\n        if (t.isArray(e)) for (var o = 0, s = e.length; o < s; o++) {\n          a(e[o]);\n        } else a(e);\n        this.context = C(r), n && t.merge(this, n), this.selector = {\n          rows: null,\n          cols: null,\n          opts: null\n        }, _i.extend(this, this, ve);\n      }, u.Api = _i, t.extend(_i.prototype, {\n        any: function any() {\n          return 0 !== this.count();\n        },\n        concat: be.concat,\n        context: [],\n        count: function count() {\n          return this.flatten().length;\n        },\n        each: function each(t) {\n          for (var e = 0, n = this.length; e < n; e++) {\n            t.call(this, this[e], e, this);\n          }\n\n          return this;\n        },\n        eq: function eq(t) {\n          var e = this.context;\n          return e.length > t ? new _i(e[t], this[t]) : null;\n        },\n        filter: function filter(t) {\n          var e = [];\n          if (be.filter) e = be.filter.call(this, t, this);else for (var n = 0, r = this.length; n < r; n++) {\n            t.call(this, this[n], n, this) && e.push(this[n]);\n          }\n          return new _i(this.context, e);\n        },\n        flatten: function flatten() {\n          var t = [];\n          return new _i(this.context, t.concat.apply(t, this.toArray()));\n        },\n        join: be.join,\n        indexOf: be.indexOf || function (t, e) {\n          for (var n = e || 0, r = this.length; n < r; n++) {\n            if (this[n] === t) return n;\n          }\n\n          return -1;\n        },\n        iterator: function iterator(t, e, n, r) {\n          var o,\n              s,\n              l,\n              u,\n              c,\n              f,\n              d,\n              h,\n              p = [],\n              g = this.context,\n              v = this.selector;\n\n          for (\"string\" == typeof t && (r = n, n = e, e = t, t = !1), s = 0, l = g.length; s < l; s++) {\n            var b = new _i(g[s]);\n            if (\"table\" === e) (o = n.call(b, g[s], s)) !== a && p.push(o);else if (\"columns\" === e || \"rows\" === e) (o = n.call(b, g[s], this[s], s)) !== a && p.push(o);else if (\"column\" === e || \"column-rows\" === e || \"row\" === e || \"cell\" === e) for (d = this[s], \"column-rows\" === e && (f = De(g[s], v.opts)), u = 0, c = d.length; u < c; u++) {\n              h = d[u], (o = \"cell\" === e ? n.call(b, g[s], h.row, h.column, s, u) : n.call(b, g[s], h, s, u, f)) !== a && p.push(o);\n            }\n          }\n\n          if (p.length || r) {\n            var y = new _i(g, t ? p.concat.apply([], p) : p),\n                m = y.selector;\n            return m.rows = v.rows, m.cols = v.cols, m.opts = v.opts, y;\n          }\n\n          return this;\n        },\n        lastIndexOf: be.lastIndexOf || function (t, e) {\n          return this.indexOf.apply(this.toArray.reverse(), arguments);\n        },\n        length: 0,\n        map: function map(t) {\n          var e = [];\n          if (be.map) e = be.map.call(this, t, this);else for (var n = 0, r = this.length; n < r; n++) {\n            e.push(t.call(this, this[n], n));\n          }\n          return new _i(this.context, e);\n        },\n        pluck: function pluck(t) {\n          return this.map(function (e) {\n            return e[t];\n          });\n        },\n        pop: be.pop,\n        push: be.push,\n        reduce: be.reduce || function (t, e) {\n          return O(this, t, e, 0, this.length, 1);\n        },\n        reduceRight: be.reduceRight || function (t, e) {\n          return O(this, t, e, this.length - 1, -1, -1);\n        },\n        reverse: be.reverse,\n        selector: null,\n        shift: be.shift,\n        slice: function slice() {\n          return new _i(this.context, this);\n        },\n        sort: be.sort,\n        splice: be.splice,\n        toArray: function toArray() {\n          return be.slice.call(this);\n        },\n        to$: function to$() {\n          return t(this);\n        },\n        toJQuery: function toJQuery() {\n          return t(this);\n        },\n        unique: function unique() {\n          return new _i(this.context, C(this));\n        },\n        unshift: be.unshift\n      }), _i.extend = function (e, n, r) {\n        if (r.length && n && (n instanceof _i || n.__dt_wrapper)) {\n          var a,\n              o,\n              s,\n              l = function l(t, e, n) {\n            return function () {\n              var r = e.apply(t, arguments);\n              return _i.extend(r, r, n.methodExt), r;\n            };\n          };\n\n          for (a = 0, o = r.length; a < o; a++) {\n            n[(s = r[a]).name] = \"function\" == typeof s.val ? l(e, s.val, s) : t.isPlainObject(s.val) ? {} : s.val, n[s.name].__dt_wrapper = !0, _i.extend(e, n[s.name], s.propExt);\n          }\n        }\n      }, _i.register = s = function s(e, n) {\n        if (t.isArray(e)) for (var r = 0, a = e.length; r < a; r++) {\n          _i.register(e[r], n);\n        } else {\n          var o,\n              s,\n              l,\n              u,\n              c = e.split(\".\"),\n              f = ve,\n              d = function d(t, e) {\n            for (var n = 0, r = t.length; n < r; n++) {\n              if (t[n].name === e) return t[n];\n            }\n\n            return null;\n          };\n\n          for (o = 0, s = c.length; o < s; o++) {\n            var h = d(f, l = (u = -1 !== c[o].indexOf(\"()\")) ? c[o].replace(\"()\", \"\") : c[o]);\n            h || (h = {\n              name: l,\n              val: {},\n              methodExt: [],\n              propExt: []\n            }, f.push(h)), o === s - 1 ? h.val = n : f = u ? h.methodExt : h.propExt;\n          }\n        }\n      }, _i.registerPlural = l = function l(e, n, r) {\n        _i.register(e, r), _i.register(n, function () {\n          var e = r.apply(this, arguments);\n          return e === this ? this : e instanceof _i ? e.length ? t.isArray(e[0]) ? new _i(e.context, e[0]) : e[0] : a : e;\n        });\n      }, s(\"tables()\", function (e) {\n        return e ? new _i(function (e, n) {\n          if (\"number\" == typeof e) return [n[e]];\n          var r = t.map(n, function (t, e) {\n            return t.nTable;\n          });\n          return t(r).filter(e).map(function (e) {\n            var a = t.inArray(this, r);\n            return n[a];\n          }).toArray();\n        }(e, this.context)) : this;\n      }), s(\"table()\", function (t) {\n        var e = this.tables(t),\n            n = e.context;\n        return n.length ? new _i(n[0]) : e;\n      }), l(\"tables().nodes()\", \"table().node()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return t.nTable;\n        }, 1);\n      }), l(\"tables().body()\", \"table().body()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return t.nTBody;\n        }, 1);\n      }), l(\"tables().header()\", \"table().header()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return t.nTHead;\n        }, 1);\n      }), l(\"tables().footer()\", \"table().footer()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return t.nTFoot;\n        }, 1);\n      }), l(\"tables().containers()\", \"table().container()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return t.nTableWrapper;\n        }, 1);\n      }), s(\"draw()\", function (t) {\n        return this.iterator(\"table\", function (e) {\n          \"page\" === t ? lt(e) : (\"string\" == typeof t && (t = \"full-hold\" !== t), ut(e, !1 === t));\n        });\n      }), s(\"page()\", function (t) {\n        return t === a ? this.page.info().page : this.iterator(\"table\", function (e) {\n          Mt(e, t);\n        });\n      }), s(\"page.info()\", function (t) {\n        if (0 === this.context.length) return a;\n        var e = this.context[0],\n            n = e._iDisplayStart,\n            r = e.oFeatures.bPaginate ? e._iDisplayLength : -1,\n            o = e.fnRecordsDisplay(),\n            i = -1 === r;\n        return {\n          page: i ? 0 : Math.floor(n / r),\n          pages: i ? 1 : Math.ceil(o / r),\n          start: n,\n          end: e.fnDisplayEnd(),\n          length: r,\n          recordsTotal: e.fnRecordsTotal(),\n          recordsDisplay: o,\n          serverSide: \"ssp\" === ge(e)\n        };\n      }), s(\"page.len()\", function (t) {\n        return t === a ? 0 !== this.context.length ? this.context[0]._iDisplayLength : a : this.iterator(\"table\", function (e) {\n          Et(e, t);\n        });\n      });\n\n      var ye = function ye(t, e, n) {\n        if (n) {\n          var r = new _i(t);\n          r.one(\"draw\", function () {\n            n(r.ajax.json());\n          });\n        }\n\n        if (\"ssp\" == ge(t)) ut(t, e);else {\n          Wt(t, !0);\n          var a = t.jqXHR;\n          a && 4 !== a.readyState && a.abort(), ht(t, [], function (n) {\n            tt(t);\n\n            for (var r = bt(t, n), a = 0, o = r.length; a < o; a++) {\n              J(t, r[a]);\n            }\n\n            ut(t, e), Wt(t, !1);\n          });\n        }\n      };\n\n      s(\"ajax.json()\", function () {\n        var t = this.context;\n        if (t.length > 0) return t[0].json;\n      }), s(\"ajax.params()\", function () {\n        var t = this.context;\n        if (t.length > 0) return t[0].oAjaxData;\n      }), s(\"ajax.reload()\", function (t, e) {\n        return this.iterator(\"table\", function (n) {\n          ye(n, !1 === e, t);\n        });\n      }), s(\"ajax.url()\", function (e) {\n        var n = this.context;\n        return e === a ? 0 === n.length ? a : (n = n[0]).ajax ? t.isPlainObject(n.ajax) ? n.ajax.url : n.ajax : n.sAjaxSource : this.iterator(\"table\", function (n) {\n          t.isPlainObject(n.ajax) ? n.ajax.url = e : n.ajax = e;\n        });\n      }), s(\"ajax.url().load()\", function (t, e) {\n        return this.iterator(\"table\", function (n) {\n          ye(n, !1 === e, t);\n        });\n      });\n\n      var me = function me(e, n, i, s, l) {\n        var u,\n            c,\n            f,\n            d,\n            h,\n            p,\n            g = [],\n            v = r(n);\n\n        for (n && \"string\" !== v && \"function\" !== v && n.length !== a || (n = [n]), f = 0, d = n.length; f < d; f++) {\n          for (h = 0, p = (c = n[f] && n[f].split && !n[f].match(/[\\[\\(:]/) ? n[f].split(\",\") : [n[f]]).length; h < p; h++) {\n            (u = i(\"string\" == typeof c[h] ? t.trim(c[h]) : c[h])) && u.length && (g = g.concat(u));\n          }\n        }\n\n        var b = o.selector[e];\n        if (b.length) for (f = 0, d = b.length; f < d; f++) {\n          g = b[f](s, l, g);\n        }\n        return C(g);\n      },\n          Se = function Se(e) {\n        return e || (e = {}), e.filter && e.search === a && (e.search = e.filter), t.extend({\n          search: \"none\",\n          order: \"current\",\n          page: \"all\"\n        }, e);\n      },\n          xe = function xe(t) {\n        for (var e = 0, n = t.length; e < n; e++) {\n          if (t[e].length > 0) return t[0] = t[e], t[0].length = 1, t.length = 1, t.context = [t.context[e]], t;\n        }\n\n        return t.length = 0, t;\n      },\n          De = function De(e, n) {\n        var r,\n            a = [],\n            o = e.aiDisplay,\n            i = e.aiDisplayMaster,\n            s = n.search,\n            l = n.order,\n            u = n.page;\n        if (\"ssp\" == ge(e)) return \"removed\" === s ? [] : w(0, i.length);\n        if (\"current\" == u) for (f = e._iDisplayStart, d = e.fnDisplayEnd(); f < d; f++) {\n          a.push(o[f]);\n        } else if (\"current\" == l || \"applied\" == l) {\n          if (\"none\" == s) a = i.slice();else if (\"applied\" == s) a = o.slice();else if (\"removed\" == s) {\n            for (var c = {}, f = 0, d = o.length; f < d; f++) {\n              c[o[f]] = null;\n            }\n\n            a = t.map(i, function (t) {\n              return c.hasOwnProperty(t) ? null : t;\n            });\n          }\n        } else if (\"index\" == l || \"original\" == l) for (f = 0, d = e.aoData.length; f < d; f++) {\n          \"none\" == s ? a.push(f) : (-1 === (r = t.inArray(f, o)) && \"removed\" == s || r >= 0 && \"applied\" == s) && a.push(f);\n        }\n        return a;\n      };\n\n      s(\"rows()\", function (e, n) {\n        e === a ? e = \"\" : t.isPlainObject(e) && (n = e, e = \"\"), n = Se(n);\n        var r = this.iterator(\"table\", function (r) {\n          return function (e, n, r) {\n            var o;\n            return me(\"row\", n, function (n) {\n              var i = b(n),\n                  s = e.aoData;\n              if (null !== i && !r) return [i];\n              if (o || (o = De(e, r)), null !== i && -1 !== t.inArray(i, o)) return [i];\n              if (null === n || n === a || \"\" === n) return o;\n              if (\"function\" == typeof n) return t.map(o, function (t) {\n                var e = s[t];\n                return n(t, e._aData, e.nTr) ? t : null;\n              });\n\n              if (n.nodeName) {\n                var l = n._DT_RowIndex,\n                    u = n._DT_CellIndex;\n                if (l !== a) return s[l] && s[l].nTr === n ? [l] : [];\n                if (u) return s[u.row] && s[u.row].nTr === n ? [u.row] : [];\n                var c = t(n).closest(\"*[data-dt-row]\");\n                return c.length ? [c.data(\"dt-row\")] : [];\n              }\n\n              if (\"string\" == typeof n && \"#\" === n.charAt(0)) {\n                var f = e.aIds[n.replace(/^#/, \"\")];\n                if (f !== a) return [f.idx];\n              }\n\n              var d = _(D(e.aoData, o, \"nTr\"));\n\n              return t(d).filter(n).map(function () {\n                return this._DT_RowIndex;\n              }).toArray();\n            }, e, r);\n          }(r, e, n);\n        }, 1);\n        return r.selector.rows = e, r.selector.opts = n, r;\n      }), s(\"rows().nodes()\", function () {\n        return this.iterator(\"row\", function (t, e) {\n          return t.aoData[e].nTr || a;\n        }, 1);\n      }), s(\"rows().data()\", function () {\n        return this.iterator(!0, \"rows\", function (t, e) {\n          return D(t.aoData, e, \"_aData\");\n        }, 1);\n      }), l(\"rows().cache()\", \"row().cache()\", function (t) {\n        return this.iterator(\"row\", function (e, n) {\n          var r = e.aoData[n];\n          return \"search\" === t ? r._aFilterData : r._aSortData;\n        }, 1);\n      }), l(\"rows().invalidate()\", \"row().invalidate()\", function (t) {\n        return this.iterator(\"row\", function (e, n) {\n          nt(e, n, t);\n        });\n      }), l(\"rows().indexes()\", \"row().index()\", function () {\n        return this.iterator(\"row\", function (t, e) {\n          return e;\n        }, 1);\n      }), l(\"rows().ids()\", \"row().id()\", function (t) {\n        for (var e = [], n = this.context, r = 0, a = n.length; r < a; r++) {\n          for (var o = 0, s = this[r].length; o < s; o++) {\n            var l = n[r].rowIdFn(n[r].aoData[this[r][o]]._aData);\n            e.push((!0 === t ? \"#\" : \"\") + l);\n          }\n        }\n\n        return new _i(n, e);\n      }), l(\"rows().remove()\", \"row().remove()\", function () {\n        var t = this;\n        return this.iterator(\"row\", function (e, n, r) {\n          var o,\n              i,\n              s,\n              l,\n              u,\n              c,\n              f = e.aoData,\n              d = f[n];\n\n          for (f.splice(n, 1), o = 0, i = f.length; o < i; o++) {\n            if (c = (u = f[o]).anCells, null !== u.nTr && (u.nTr._DT_RowIndex = o), null !== c) for (s = 0, l = c.length; s < l; s++) {\n              c[s]._DT_CellIndex.row = o;\n            }\n          }\n\n          et(e.aiDisplayMaster, n), et(e.aiDisplay, n), et(t[r], n, !1), e._iRecordsDisplay > 0 && e._iRecordsDisplay--, he(e);\n          var h = e.rowIdFn(d._aData);\n          h !== a && delete e.aIds[h];\n        }), this.iterator(\"table\", function (t) {\n          for (var e = 0, n = t.aoData.length; e < n; e++) {\n            t.aoData[e].idx = e;\n          }\n        }), this;\n      }), s(\"rows.add()\", function (e) {\n        var n = this.iterator(\"table\", function (t) {\n          var n,\n              r,\n              a,\n              o = [];\n\n          for (r = 0, a = e.length; r < a; r++) {\n            (n = e[r]).nodeName && \"TR\" === n.nodeName.toUpperCase() ? o.push(X(t, n)[0]) : o.push(J(t, n));\n          }\n\n          return o;\n        }, 1),\n            r = this.rows(-1);\n        return r.pop(), t.merge(r, n), r;\n      }), s(\"row()\", function (t, e) {\n        return xe(this.rows(t, e));\n      }), s(\"row().data()\", function (e) {\n        var n = this.context;\n        if (e === a) return n.length && this.length ? n[0].aoData[this[0]]._aData : a;\n        var r = n[0].aoData[this[0]];\n        return r._aData = e, t.isArray(e) && r.nTr.id && Q(n[0].rowId)(e, r.nTr.id), nt(n[0], this[0], \"data\"), this;\n      }), s(\"row().node()\", function () {\n        var t = this.context;\n        return t.length && this.length && t[0].aoData[this[0]].nTr || null;\n      }), s(\"row.add()\", function (e) {\n        e instanceof t && e.length && (e = e[0]);\n        var n = this.iterator(\"table\", function (t) {\n          return e.nodeName && \"TR\" === e.nodeName.toUpperCase() ? X(t, e)[0] : J(t, e);\n        });\n        return this.row(n[0]);\n      });\n\n      var we = function we(t, e) {\n        var n = t.context;\n\n        if (n.length) {\n          var r = n[0].aoData[e !== a ? e : t[0]];\n          r && r._details && (r._details.remove(), r._detailsShow = a, r._details = a);\n        }\n      },\n          _e = function _e(t, e) {\n        var n = t.context;\n\n        if (n.length && t.length) {\n          var r = n[0].aoData[t[0]];\n          r._details && (r._detailsShow = e, e ? r._details.insertAfter(r.nTr) : r._details.detach(), Te(n[0]));\n        }\n      },\n          Te = function Te(t) {\n        var e = new _i(t),\n            n = t.aoData;\n        e.off(\"draw.dt.DT_details column-visibility.dt.DT_details destroy.dt.DT_details\"), x(n, \"_details\").length > 0 && (e.on(\"draw.dt.DT_details\", function (r, a) {\n          t === a && e.rows({\n            page: \"current\"\n          }).eq(0).each(function (t) {\n            var e = n[t];\n            e._detailsShow && e._details.insertAfter(e.nTr);\n          });\n        }), e.on(\"column-visibility.dt.DT_details\", function (e, r, a, o) {\n          if (t === r) for (var i, s = W(r), l = 0, u = n.length; l < u; l++) {\n            (i = n[l])._details && i._details.children(\"td[colspan]\").attr(\"colspan\", s);\n          }\n        }), e.on(\"destroy.dt.DT_details\", function (r, a) {\n          if (t === a) for (var o = 0, i = n.length; o < i; o++) {\n            n[o]._details && we(e, o);\n          }\n        }));\n      };\n\n      s(\"row().child()\", function (e, n) {\n        var r = this.context;\n        return e === a ? r.length && this.length ? r[0].aoData[this[0]]._details : a : (!0 === e ? this.child.show() : !1 === e ? we(this) : r.length && this.length && function (e, n, r, a) {\n          var o = [];\n          !function n(r, a) {\n            if (t.isArray(r) || r instanceof t) for (var i = 0, s = r.length; i < s; i++) {\n              n(r[i], a);\n            } else if (r.nodeName && \"tr\" === r.nodeName.toLowerCase()) o.push(r);else {\n              var l = t(\"<tr><td/></tr>\").addClass(a);\n              t(\"td\", l).addClass(a).html(r)[0].colSpan = W(e), o.push(l[0]);\n            }\n          }(r, a), n._details && n._details.detach(), n._details = t(o), n._detailsShow && n._details.insertAfter(n.nTr);\n        }(r[0], r[0].aoData[this[0]], e, n), this);\n      }), s([\"row().child.show()\", \"row().child().show()\"], function (t) {\n        return _e(this, !0), this;\n      }), s([\"row().child.hide()\", \"row().child().hide()\"], function () {\n        return _e(this, !1), this;\n      }), s([\"row().child.remove()\", \"row().child().remove()\"], function () {\n        return we(this), this;\n      }), s(\"row().child.isShown()\", function () {\n        var t = this.context;\n        return t.length && this.length && t[0].aoData[this[0]]._detailsShow || !1;\n      });\n\n      var Ce = /^([^:]+):(name|visIdx|visible)$/,\n          Ie = function Ie(t, e, n, r, a) {\n        for (var o = [], i = 0, s = a.length; i < s; i++) {\n          o.push(G(t, a[i], e));\n        }\n\n        return o;\n      };\n\n      s(\"columns()\", function (e, n) {\n        e === a ? e = \"\" : t.isPlainObject(e) && (n = e, e = \"\"), n = Se(n);\n        var r = this.iterator(\"table\", function (r) {\n          return function (e, n, r) {\n            var a = e.aoColumns,\n                o = x(a, \"sName\"),\n                i = x(a, \"nTh\");\n            return me(\"column\", n, function (n) {\n              var s = b(n);\n              if (\"\" === n) return w(a.length);\n              if (null !== s) return [s >= 0 ? s : a.length + s];\n\n              if (\"function\" == typeof n) {\n                var l = De(e, r);\n                return t.map(a, function (t, r) {\n                  return n(r, Ie(e, r, 0, 0, l), i[r]) ? r : null;\n                });\n              }\n\n              var u = \"string\" == typeof n ? n.match(Ce) : \"\";\n              if (u) switch (u[2]) {\n                case \"visIdx\":\n                case \"visible\":\n                  var c = parseInt(u[1], 10);\n\n                  if (c < 0) {\n                    var f = t.map(a, function (t, e) {\n                      return t.bVisible ? e : null;\n                    });\n                    return [f[f.length + c]];\n                  }\n\n                  return [M(e, c)];\n\n                case \"name\":\n                  return t.map(o, function (t, e) {\n                    return t === u[1] ? e : null;\n                  });\n\n                default:\n                  return [];\n              }\n              if (n.nodeName && n._DT_CellIndex) return [n._DT_CellIndex.column];\n              var d = t(i).filter(n).map(function () {\n                return t.inArray(this, i);\n              }).toArray();\n              if (d.length || !n.nodeName) return d;\n              var h = t(n).closest(\"*[data-dt-column]\");\n              return h.length ? [h.data(\"dt-column\")] : [];\n            }, e, r);\n          }(r, e, n);\n        }, 1);\n        return r.selector.cols = e, r.selector.opts = n, r;\n      }), l(\"columns().header()\", \"column().header()\", function (t, e) {\n        return this.iterator(\"column\", function (t, e) {\n          return t.aoColumns[e].nTh;\n        }, 1);\n      }), l(\"columns().footer()\", \"column().footer()\", function (t, e) {\n        return this.iterator(\"column\", function (t, e) {\n          return t.aoColumns[e].nTf;\n        }, 1);\n      }), l(\"columns().data()\", \"column().data()\", function () {\n        return this.iterator(\"column-rows\", Ie, 1);\n      }), l(\"columns().dataSrc()\", \"column().dataSrc()\", function () {\n        return this.iterator(\"column\", function (t, e) {\n          return t.aoColumns[e].mData;\n        }, 1);\n      }), l(\"columns().cache()\", \"column().cache()\", function (t) {\n        return this.iterator(\"column-rows\", function (e, n, r, a, o) {\n          return D(e.aoData, o, \"search\" === t ? \"_aFilterData\" : \"_aSortData\", n);\n        }, 1);\n      }), l(\"columns().nodes()\", \"column().nodes()\", function () {\n        return this.iterator(\"column-rows\", function (t, e, n, r, a) {\n          return D(t.aoData, a, \"anCells\", e);\n        }, 1);\n      }), l(\"columns().visible()\", \"column().visible()\", function (e, n) {\n        var r = this.iterator(\"column\", function (n, r) {\n          if (e === a) return n.aoColumns[r].bVisible;\n          !function (e, n, r) {\n            var o,\n                i,\n                s,\n                l,\n                u = e.aoColumns,\n                c = u[n],\n                f = e.aoData;\n            if (r === a) return c.bVisible;\n\n            if (c.bVisible !== r) {\n              if (r) {\n                var d = t.inArray(!0, x(u, \"bVisible\"), n + 1);\n\n                for (i = 0, s = f.length; i < s; i++) {\n                  l = f[i].nTr, o = f[i].anCells, l && l.insertBefore(o[n], o[d] || null);\n                }\n              } else t(x(e.aoData, \"anCells\", n)).detach();\n\n              c.bVisible = r, st(e, e.aoHeader), st(e, e.aoFooter), e.aiDisplay.length || t(e.nTBody).find(\"td[colspan]\").attr(\"colspan\", W(e)), ae(e);\n            }\n          }(n, r, e);\n        });\n        return e !== a && (this.iterator(\"column\", function (t, r) {\n          de(t, null, \"column-visibility\", [t, r, e, n]);\n        }), (n === a || n) && this.columns.adjust()), r;\n      }), l(\"columns().indexes()\", \"column().index()\", function (t) {\n        return this.iterator(\"column\", function (e, n) {\n          return \"visible\" === t ? H(e, n) : n;\n        }, 1);\n      }), s(\"columns.adjust()\", function () {\n        return this.iterator(\"table\", function (t) {\n          k(t);\n        }, 1);\n      }), s(\"column.index()\", function (t, e) {\n        if (0 !== this.context.length) {\n          var n = this.context[0];\n          if (\"fromVisible\" === t || \"toData\" === t) return M(n, e);\n          if (\"fromData\" === t || \"toVisible\" === t) return H(n, e);\n        }\n      }), s(\"column()\", function (t, e) {\n        return xe(this.columns(t, e));\n      }), s(\"cells()\", function (e, n, r) {\n        if (t.isPlainObject(e) && (e.row === a ? (r = e, e = null) : (r = n, n = null)), t.isPlainObject(n) && (r = n, n = null), null === n || n === a) return this.iterator(\"table\", function (n) {\n          return function (e, n, r) {\n            var o,\n                i,\n                s,\n                l,\n                u,\n                c,\n                f,\n                d = e.aoData,\n                h = De(e, r),\n                p = _(D(d, h, \"anCells\")),\n                g = t([].concat.apply([], p)),\n                v = e.aoColumns.length;\n\n            return me(\"cell\", n, function (n) {\n              var r = \"function\" == typeof n;\n\n              if (null === n || n === a || r) {\n                for (i = [], s = 0, l = h.length; s < l; s++) {\n                  for (o = h[s], u = 0; u < v; u++) {\n                    c = {\n                      row: o,\n                      column: u\n                    }, r ? (f = d[o], n(c, G(e, o, u), f.anCells ? f.anCells[u] : null) && i.push(c)) : i.push(c);\n                  }\n                }\n\n                return i;\n              }\n\n              if (t.isPlainObject(n)) return n.column !== a && n.row !== a && -1 !== t.inArray(n.row, h) ? [n] : [];\n              var p = g.filter(n).map(function (t, e) {\n                return {\n                  row: e._DT_CellIndex.row,\n                  column: e._DT_CellIndex.column\n                };\n              }).toArray();\n              return p.length || !n.nodeName ? p : (f = t(n).closest(\"*[data-dt-row]\")).length ? [{\n                row: f.data(\"dt-row\"),\n                column: f.data(\"dt-column\")\n              }] : [];\n            }, e, r);\n          }(n, e, Se(r));\n        });\n        var o,\n            i,\n            s,\n            l,\n            u,\n            c = this.columns(n),\n            f = this.rows(e);\n        this.iterator(\"table\", function (t, e) {\n          for (o = [], i = 0, s = f[e].length; i < s; i++) {\n            for (l = 0, u = c[e].length; l < u; l++) {\n              o.push({\n                row: f[e][i],\n                column: c[e][l]\n              });\n            }\n          }\n        }, 1);\n        var d = this.cells(o, r);\n        return t.extend(d.selector, {\n          cols: n,\n          rows: e,\n          opts: r\n        }), d;\n      }), l(\"cells().nodes()\", \"cell().node()\", function () {\n        return this.iterator(\"cell\", function (t, e, n) {\n          var r = t.aoData[e];\n          return r && r.anCells ? r.anCells[n] : a;\n        }, 1);\n      }), s(\"cells().data()\", function () {\n        return this.iterator(\"cell\", function (t, e, n) {\n          return G(t, e, n);\n        }, 1);\n      }), l(\"cells().cache()\", \"cell().cache()\", function (t) {\n        return t = \"search\" === t ? \"_aFilterData\" : \"_aSortData\", this.iterator(\"cell\", function (e, n, r) {\n          return e.aoData[n][t][r];\n        }, 1);\n      }), l(\"cells().render()\", \"cell().render()\", function (t) {\n        return this.iterator(\"cell\", function (e, n, r) {\n          return G(e, n, r, t);\n        }, 1);\n      }), l(\"cells().indexes()\", \"cell().index()\", function () {\n        return this.iterator(\"cell\", function (t, e, n) {\n          return {\n            row: e,\n            column: n,\n            columnVisible: H(t, n)\n          };\n        }, 1);\n      }), l(\"cells().invalidate()\", \"cell().invalidate()\", function (t) {\n        return this.iterator(\"cell\", function (e, n, r) {\n          nt(e, n, t, r);\n        });\n      }), s(\"cell()\", function (t, e, n) {\n        return xe(this.cells(t, e, n));\n      }), s(\"cell().data()\", function (t) {\n        var e = this.context,\n            n = this[0];\n        return t === a ? e.length && n.length ? G(e[0], n[0].row, n[0].column) : a : ($(e[0], n[0].row, n[0].column, t), nt(e[0], n[0].row, \"data\", n[0].column), this);\n      }), s(\"order()\", function (e, n) {\n        var r = this.context;\n        return e === a ? 0 !== r.length ? r[0].aaSorting : a : (\"number\" == typeof e ? e = [[e, n]] : e.length && !t.isArray(e[0]) && (e = Array.prototype.slice.call(arguments)), this.iterator(\"table\", function (t) {\n          t.aaSorting = e.slice();\n        }));\n      }), s(\"order.listener()\", function (t, e, n) {\n        return this.iterator(\"table\", function (r) {\n          ee(r, t, e, n);\n        });\n      }), s(\"order.fixed()\", function (e) {\n        if (!e) {\n          var n = this.context,\n              r = n.length ? n[0].aaSortingFixed : a;\n          return t.isArray(r) ? {\n            pre: r\n          } : r;\n        }\n\n        return this.iterator(\"table\", function (n) {\n          n.aaSortingFixed = t.extend(!0, {}, e);\n        });\n      }), s([\"columns().order()\", \"column().order()\"], function (e) {\n        var n = this;\n        return this.iterator(\"table\", function (r, a) {\n          var o = [];\n          t.each(n[a], function (t, n) {\n            o.push([n, e]);\n          }), r.aaSorting = o;\n        });\n      }), s(\"search()\", function (e, n, r, o) {\n        var i = this.context;\n        return e === a ? 0 !== i.length ? i[0].oPreviousSearch.sSearch : a : this.iterator(\"table\", function (a) {\n          a.oFeatures.bFilter && mt(a, t.extend({}, a.oPreviousSearch, {\n            sSearch: e + \"\",\n            bRegex: null !== n && n,\n            bSmart: null === r || r,\n            bCaseInsensitive: null === o || o\n          }), 1);\n        });\n      }), l(\"columns().search()\", \"column().search()\", function (e, n, r, o) {\n        return this.iterator(\"column\", function (i, s) {\n          var l = i.aoPreSearchCols;\n          if (e === a) return l[s].sSearch;\n          i.oFeatures.bFilter && (t.extend(l[s], {\n            sSearch: e + \"\",\n            bRegex: null !== n && n,\n            bSmart: null === r || r,\n            bCaseInsensitive: null === o || o\n          }), mt(i, i.oPreviousSearch, 1));\n        });\n      }), s(\"state()\", function () {\n        return this.context.length ? this.context[0].oSavedState : null;\n      }), s(\"state.clear()\", function () {\n        return this.iterator(\"table\", function (t) {\n          t.fnStateSaveCallback.call(t.oInstance, t, {});\n        });\n      }), s(\"state.loaded()\", function () {\n        return this.context.length ? this.context[0].oLoadedState : null;\n      }), s(\"state.save()\", function () {\n        return this.iterator(\"table\", function (t) {\n          ae(t);\n        });\n      }), u.versionCheck = u.fnVersionCheck = function (t) {\n        for (var e, n, r = u.version.split(\".\"), a = t.split(\".\"), o = 0, i = a.length; o < i; o++) {\n          if ((e = parseInt(r[o], 10) || 0) !== (n = parseInt(a[o], 10) || 0)) return e > n;\n        }\n\n        return !0;\n      }, u.isDataTable = u.fnIsDataTable = function (e) {\n        var n = t(e).get(0),\n            r = !1;\n        return e instanceof u.Api || (t.each(u.settings, function (e, a) {\n          var o = a.nScrollHead ? t(\"table\", a.nScrollHead)[0] : null,\n              i = a.nScrollFoot ? t(\"table\", a.nScrollFoot)[0] : null;\n          a.nTable !== n && o !== n && i !== n || (r = !0);\n        }), r);\n      }, u.tables = u.fnTables = function (e) {\n        var n = !1;\n        t.isPlainObject(e) && (n = e.api, e = e.visible);\n        var r = t.map(u.settings, function (n) {\n          if (!e || e && t(n.nTable).is(\":visible\")) return n.nTable;\n        });\n        return n ? new _i(r) : r;\n      }, u.camelToHungarian = A, s(\"$()\", function (e, n) {\n        var r = this.rows(n).nodes(),\n            a = t(r);\n        return t([].concat(a.filter(e).toArray(), a.find(e).toArray()));\n      }), t.each([\"on\", \"one\", \"off\"], function (e, n) {\n        s(n + \"()\", function () {\n          var e = Array.prototype.slice.call(arguments);\n          e[0] = t.map(e[0].split(/\\s/), function (t) {\n            return t.match(/\\.dt\\b/) ? t : t + \".dt\";\n          }).join(\" \");\n          var r = t(this.tables().nodes());\n          return r[n].apply(r, e), this;\n        });\n      }), s(\"clear()\", function () {\n        return this.iterator(\"table\", function (t) {\n          tt(t);\n        });\n      }), s(\"settings()\", function () {\n        return new _i(this.context, this.context);\n      }), s(\"init()\", function () {\n        var t = this.context;\n        return t.length ? t[0].oInit : null;\n      }), s(\"data()\", function () {\n        return this.iterator(\"table\", function (t) {\n          return x(t.aoData, \"_aData\");\n        }).flatten();\n      }), s(\"destroy()\", function (n) {\n        return n = n || !1, this.iterator(\"table\", function (r) {\n          var a,\n              o = r.nTableWrapper.parentNode,\n              s = r.oClasses,\n              l = r.nTable,\n              c = r.nTBody,\n              f = r.nTHead,\n              d = r.nTFoot,\n              h = t(l),\n              p = t(c),\n              g = t(r.nTableWrapper),\n              v = t.map(r.aoData, function (t) {\n            return t.nTr;\n          });\n          r.bDestroying = !0, de(r, \"aoDestroyCallback\", \"destroy\", [r]), n || new _i(r).columns().visible(!0), g.off(\".DT\").find(\":not(tbody *)\").off(\".DT\"), t(_e3).off(\".DT-\" + r.sInstance), l != f.parentNode && (h.children(\"thead\").detach(), h.append(f)), d && l != d.parentNode && (h.children(\"tfoot\").detach(), h.append(d)), r.aaSorting = [], r.aaSortingFixed = [], ne(r), t(v).removeClass(r.asStripeClasses.join(\" \")), t(\"th, td\", f).removeClass(s.sSortable + \" \" + s.sSortableAsc + \" \" + s.sSortableDesc + \" \" + s.sSortableNone), p.children().detach(), p.append(v);\n          var b = n ? \"remove\" : \"detach\";\n          h[b](), g[b](), !n && o && (o.insertBefore(l, r.nTableReinsertBefore), h.css(\"width\", r.sDestroyWidth).removeClass(s.sTable), (a = r.asDestroyStripes.length) && p.children().each(function (e) {\n            t(this).addClass(r.asDestroyStripes[e % a]);\n          }));\n          var y = t.inArray(r, u.settings);\n          -1 !== y && u.settings.splice(y, 1);\n        });\n      }), t.each([\"column\", \"row\", \"cell\"], function (t, e) {\n        s(e + \"s().every()\", function (t) {\n          var n = this.selector.opts,\n              r = this;\n          return this.iterator(e, function (o, i, s, l, u) {\n            t.call(r[e](i, \"cell\" === e ? s : n, \"cell\" === e ? n : a), i, s, l, u);\n          });\n        });\n      }), s(\"i18n()\", function (e, n, r) {\n        var o = this.context[0],\n            i = Z(e)(o.oLanguage);\n        return i === a && (i = n), r !== a && t.isPlainObject(i) && (i = i[r] !== a ? i[r] : i._), i.replace(\"%d\", r);\n      }), u.version = \"1.10.18\", u.settings = [], u.models = {}, u.models.oSearch = {\n        bCaseInsensitive: !0,\n        sSearch: \"\",\n        bRegex: !1,\n        bSmart: !0\n      }, u.models.oRow = {\n        nTr: null,\n        anCells: null,\n        _aData: [],\n        _aSortData: null,\n        _aFilterData: null,\n        _sFilterRow: null,\n        _sRowStripe: \"\",\n        src: null,\n        idx: -1\n      }, u.models.oColumn = {\n        idx: null,\n        aDataSort: null,\n        asSorting: null,\n        bSearchable: null,\n        bSortable: null,\n        bVisible: null,\n        _sManualType: null,\n        _bAttrSrc: !1,\n        fnCreatedCell: null,\n        fnGetData: null,\n        fnSetData: null,\n        mData: null,\n        mRender: null,\n        nTh: null,\n        nTf: null,\n        sClass: null,\n        sContentPadding: null,\n        sDefaultContent: null,\n        sName: null,\n        sSortDataType: \"std\",\n        sSortingClass: null,\n        sSortingClassJUI: null,\n        sTitle: null,\n        sType: null,\n        sWidth: null,\n        sWidthOrig: null\n      }, u.defaults = {\n        aaData: null,\n        aaSorting: [[0, \"asc\"]],\n        aaSortingFixed: [],\n        ajax: null,\n        aLengthMenu: [10, 25, 50, 100],\n        aoColumns: null,\n        aoColumnDefs: null,\n        aoSearchCols: [],\n        asStripeClasses: null,\n        bAutoWidth: !0,\n        bDeferRender: !1,\n        bDestroy: !1,\n        bFilter: !0,\n        bInfo: !0,\n        bLengthChange: !0,\n        bPaginate: !0,\n        bProcessing: !1,\n        bRetrieve: !1,\n        bScrollCollapse: !1,\n        bServerSide: !1,\n        bSort: !0,\n        bSortMulti: !0,\n        bSortCellsTop: !1,\n        bSortClasses: !0,\n        bStateSave: !1,\n        fnCreatedRow: null,\n        fnDrawCallback: null,\n        fnFooterCallback: null,\n        fnFormatNumber: function fnFormatNumber(t) {\n          return t.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, this.oLanguage.sThousands);\n        },\n        fnHeaderCallback: null,\n        fnInfoCallback: null,\n        fnInitComplete: null,\n        fnPreDrawCallback: null,\n        fnRowCallback: null,\n        fnServerData: null,\n        fnServerParams: null,\n        fnStateLoadCallback: function fnStateLoadCallback(t) {\n          try {\n            return JSON.parse((-1 === t.iStateDuration ? sessionStorage : localStorage).getItem(\"DataTables_\" + t.sInstance + \"_\" + location.pathname));\n          } catch (t) {}\n        },\n        fnStateLoadParams: null,\n        fnStateLoaded: null,\n        fnStateSaveCallback: function fnStateSaveCallback(t, e) {\n          try {\n            (-1 === t.iStateDuration ? sessionStorage : localStorage).setItem(\"DataTables_\" + t.sInstance + \"_\" + location.pathname, JSON.stringify(e));\n          } catch (t) {}\n        },\n        fnStateSaveParams: null,\n        iStateDuration: 7200,\n        iDeferLoading: null,\n        iDisplayLength: 10,\n        iDisplayStart: 0,\n        iTabIndex: 0,\n        oClasses: {},\n        oLanguage: {\n          oAria: {\n            sSortAscending: \": activate to sort column ascending\",\n            sSortDescending: \": activate to sort column descending\"\n          },\n          oPaginate: {\n            sFirst: \"First\",\n            sLast: \"Last\",\n            sNext: \"Next\",\n            sPrevious: \"Previous\"\n          },\n          sEmptyTable: \"No data available in table\",\n          sInfo: \"Showing _START_ to _END_ of _TOTAL_ entries\",\n          sInfoEmpty: \"Showing 0 to 0 of 0 entries\",\n          sInfoFiltered: \"(filtered from _MAX_ total entries)\",\n          sInfoPostFix: \"\",\n          sDecimal: \"\",\n          sThousands: \",\",\n          sLengthMenu: \"Show _MENU_ entries\",\n          sLoadingRecords: \"Loading...\",\n          sProcessing: \"Processing...\",\n          sSearch: \"Search:\",\n          sSearchPlaceholder: \"\",\n          sUrl: \"\",\n          sZeroRecords: \"No matching records found\"\n        },\n        oSearch: t.extend({}, u.models.oSearch),\n        sAjaxDataProp: \"data\",\n        sAjaxSource: null,\n        sDom: \"lfrtip\",\n        searchDelay: null,\n        sPaginationType: \"simple_numbers\",\n        sScrollX: \"\",\n        sScrollXInner: \"\",\n        sScrollY: \"\",\n        sServerMethod: \"GET\",\n        renderer: null,\n        rowId: \"DT_RowId\"\n      }, I(u.defaults), u.defaults.column = {\n        aDataSort: null,\n        iDataSort: -1,\n        asSorting: [\"asc\", \"desc\"],\n        bSearchable: !0,\n        bSortable: !0,\n        bVisible: !0,\n        fnCreatedCell: null,\n        mData: null,\n        mRender: null,\n        sCellType: \"td\",\n        sClass: \"\",\n        sContentPadding: \"\",\n        sDefaultContent: null,\n        sName: \"\",\n        sSortDataType: \"std\",\n        sTitle: null,\n        sType: null,\n        sWidth: null\n      }, I(u.defaults.column), u.models.oSettings = {\n        oFeatures: {\n          bAutoWidth: null,\n          bDeferRender: null,\n          bFilter: null,\n          bInfo: null,\n          bLengthChange: null,\n          bPaginate: null,\n          bProcessing: null,\n          bServerSide: null,\n          bSort: null,\n          bSortMulti: null,\n          bSortClasses: null,\n          bStateSave: null\n        },\n        oScroll: {\n          bCollapse: null,\n          iBarWidth: 0,\n          sX: null,\n          sXInner: null,\n          sY: null\n        },\n        oLanguage: {\n          fnInfoCallback: null\n        },\n        oBrowser: {\n          bScrollOversize: !1,\n          bScrollbarLeft: !1,\n          bBounding: !1,\n          barWidth: 0\n        },\n        ajax: null,\n        aanFeatures: [],\n        aoData: [],\n        aiDisplay: [],\n        aiDisplayMaster: [],\n        aIds: {},\n        aoColumns: [],\n        aoHeader: [],\n        aoFooter: [],\n        oPreviousSearch: {},\n        aoPreSearchCols: [],\n        aaSorting: null,\n        aaSortingFixed: [],\n        asStripeClasses: null,\n        asDestroyStripes: [],\n        sDestroyWidth: 0,\n        aoRowCallback: [],\n        aoHeaderCallback: [],\n        aoFooterCallback: [],\n        aoDrawCallback: [],\n        aoRowCreatedCallback: [],\n        aoPreDrawCallback: [],\n        aoInitComplete: [],\n        aoStateSaveParams: [],\n        aoStateLoadParams: [],\n        aoStateLoaded: [],\n        sTableId: \"\",\n        nTable: null,\n        nTHead: null,\n        nTFoot: null,\n        nTBody: null,\n        nTableWrapper: null,\n        bDeferLoading: !1,\n        bInitialised: !1,\n        aoOpenRows: [],\n        sDom: null,\n        searchDelay: null,\n        sPaginationType: \"two_button\",\n        iStateDuration: 0,\n        aoStateSave: [],\n        aoStateLoad: [],\n        oSavedState: null,\n        oLoadedState: null,\n        sAjaxSource: null,\n        sAjaxDataProp: null,\n        bAjaxDataGet: !0,\n        jqXHR: null,\n        json: a,\n        oAjaxData: a,\n        fnServerData: null,\n        aoServerParams: [],\n        sServerMethod: null,\n        fnFormatNumber: null,\n        aLengthMenu: null,\n        iDraw: 0,\n        bDrawing: !1,\n        iDrawError: -1,\n        _iDisplayLength: 10,\n        _iDisplayStart: 0,\n        _iRecordsTotal: 0,\n        _iRecordsDisplay: 0,\n        oClasses: {},\n        bFiltered: !1,\n        bSorted: !1,\n        bSortCellsTop: null,\n        oInit: null,\n        aoDestroyCallback: [],\n        fnRecordsTotal: function fnRecordsTotal() {\n          return \"ssp\" == ge(this) ? 1 * this._iRecordsTotal : this.aiDisplayMaster.length;\n        },\n        fnRecordsDisplay: function fnRecordsDisplay() {\n          return \"ssp\" == ge(this) ? 1 * this._iRecordsDisplay : this.aiDisplay.length;\n        },\n        fnDisplayEnd: function fnDisplayEnd() {\n          var t = this._iDisplayLength,\n              e = this._iDisplayStart,\n              n = e + t,\n              r = this.aiDisplay.length,\n              a = this.oFeatures,\n              o = a.bPaginate;\n          return a.bServerSide ? !1 === o || -1 === t ? e + r : Math.min(e + t, this._iRecordsDisplay) : !o || n > r || -1 === t ? r : n;\n        },\n        oInstance: null,\n        sInstance: null,\n        iTabIndex: 0,\n        nScrollHead: null,\n        nScrollFoot: null,\n        aLastSort: [],\n        oPlugins: {},\n        rowIdFn: null,\n        rowId: null\n      }, u.ext = o = {\n        buttons: {},\n        classes: {},\n        build: \"bs4/dt-1.10.18\",\n        errMode: \"alert\",\n        feature: [],\n        search: [],\n        selector: {\n          cell: [],\n          column: [],\n          row: []\n        },\n        internal: {},\n        legacy: {\n          ajax: null\n        },\n        pager: {},\n        renderer: {\n          pageButton: {},\n          header: {}\n        },\n        order: {},\n        type: {\n          detect: [],\n          search: {},\n          order: {}\n        },\n        _unique: 0,\n        fnVersionCheck: u.fnVersionCheck,\n        iApiIndex: 0,\n        oJUIClasses: {},\n        sVersion: u.version\n      }, t.extend(o, {\n        afnFiltering: o.search,\n        aTypes: o.type.detect,\n        ofnSearch: o.type.search,\n        oSort: o.type.order,\n        afnSortData: o.order,\n        aoFeatures: o.feature,\n        oApi: o.internal,\n        oStdClasses: o.classes,\n        oPagination: o.pager\n      }), t.extend(u.ext.classes, {\n        sTable: \"dataTable\",\n        sNoFooter: \"no-footer\",\n        sPageButton: \"paginate_button\",\n        sPageButtonActive: \"current\",\n        sPageButtonDisabled: \"disabled\",\n        sStripeOdd: \"odd\",\n        sStripeEven: \"even\",\n        sRowEmpty: \"dataTables_empty\",\n        sWrapper: \"dataTables_wrapper\",\n        sFilter: \"dataTables_filter\",\n        sInfo: \"dataTables_info\",\n        sPaging: \"dataTables_paginate paging_\",\n        sLength: \"dataTables_length\",\n        sProcessing: \"dataTables_processing\",\n        sSortAsc: \"sorting_asc\",\n        sSortDesc: \"sorting_desc\",\n        sSortable: \"sorting\",\n        sSortableAsc: \"sorting_asc_disabled\",\n        sSortableDesc: \"sorting_desc_disabled\",\n        sSortableNone: \"sorting_disabled\",\n        sSortColumn: \"sorting_\",\n        sFilterInput: \"\",\n        sLengthSelect: \"\",\n        sScrollWrapper: \"dataTables_scroll\",\n        sScrollHead: \"dataTables_scrollHead\",\n        sScrollHeadInner: \"dataTables_scrollHeadInner\",\n        sScrollBody: \"dataTables_scrollBody\",\n        sScrollFoot: \"dataTables_scrollFoot\",\n        sScrollFootInner: \"dataTables_scrollFootInner\",\n        sHeaderTH: \"\",\n        sFooterTH: \"\",\n        sSortJUIAsc: \"\",\n        sSortJUIDesc: \"\",\n        sSortJUI: \"\",\n        sSortJUIAscAllowed: \"\",\n        sSortJUIDescAllowed: \"\",\n        sSortJUIWrapper: \"\",\n        sSortIcon: \"\",\n        sJUIHeader: \"\",\n        sJUIFooter: \"\"\n      });\n      var Ae = u.ext.pager;\n\n      function je(t, e) {\n        var n = [],\n            r = Ae.numbers_length,\n            a = Math.floor(r / 2);\n        return e <= r ? n = w(0, e) : t <= a ? ((n = w(0, r - 2)).push(\"ellipsis\"), n.push(e - 1)) : t >= e - 1 - a ? ((n = w(e - (r - 2), e)).splice(0, 0, \"ellipsis\"), n.splice(0, 0, 0)) : ((n = w(t - a + 2, t + a - 1)).push(\"ellipsis\"), n.push(e - 1), n.splice(0, 0, \"ellipsis\"), n.splice(0, 0, 0)), n.DT_el = \"span\", n;\n      }\n\n      t.extend(Ae, {\n        simple: function simple(t, e) {\n          return [\"previous\", \"next\"];\n        },\n        full: function full(t, e) {\n          return [\"first\", \"previous\", \"next\", \"last\"];\n        },\n        numbers: function numbers(t, e) {\n          return [je(t, e)];\n        },\n        simple_numbers: function simple_numbers(t, e) {\n          return [\"previous\", je(t, e), \"next\"];\n        },\n        full_numbers: function full_numbers(t, e) {\n          return [\"first\", \"previous\", je(t, e), \"next\", \"last\"];\n        },\n        first_last_numbers: function first_last_numbers(t, e) {\n          return [\"first\", je(t, e), \"last\"];\n        },\n        _numbers: je,\n        numbers_length: 7\n      }), t.extend(!0, u.ext.renderer, {\n        pageButton: {\n          _: function _(e, r, o, i, s, l) {\n            var u,\n                c,\n                f,\n                d = e.oClasses,\n                h = e.oLanguage.oPaginate,\n                p = e.oLanguage.oAria.paginate || {},\n                g = 0;\n\n            try {\n              f = t(r).find(n.activeElement).data(\"dt-idx\");\n            } catch (t) {}\n\n            !function n(r, a) {\n              var i,\n                  f,\n                  v,\n                  b = function b(t) {\n                Mt(e, t.data.action, !0);\n              };\n\n              for (i = 0, f = a.length; i < f; i++) {\n                if (v = a[i], t.isArray(v)) n(t(\"<\" + (v.DT_el || \"div\") + \"/>\").appendTo(r), v);else {\n                  switch (u = null, c = \"\", v) {\n                    case \"ellipsis\":\n                      r.append('<span class=\"ellipsis\">&#x2026;</span>');\n                      break;\n\n                    case \"first\":\n                      u = h.sFirst, c = v + (s > 0 ? \"\" : \" \" + d.sPageButtonDisabled);\n                      break;\n\n                    case \"previous\":\n                      u = h.sPrevious, c = v + (s > 0 ? \"\" : \" \" + d.sPageButtonDisabled);\n                      break;\n\n                    case \"next\":\n                      u = h.sNext, c = v + (s < l - 1 ? \"\" : \" \" + d.sPageButtonDisabled);\n                      break;\n\n                    case \"last\":\n                      u = h.sLast, c = v + (s < l - 1 ? \"\" : \" \" + d.sPageButtonDisabled);\n                      break;\n\n                    default:\n                      u = v + 1, c = s === v ? d.sPageButtonActive : \"\";\n                  }\n\n                  null !== u && (ce(t(\"<a>\", {\n                    \"class\": d.sPageButton + \" \" + c,\n                    \"aria-controls\": e.sTableId,\n                    \"aria-label\": p[v],\n                    \"data-dt-idx\": g,\n                    tabindex: e.iTabIndex,\n                    id: 0 === o && \"string\" == typeof v ? e.sTableId + \"_\" + v : null\n                  }).html(u).appendTo(r), {\n                    action: v\n                  }, b), g++);\n                }\n              }\n            }(t(r).empty(), i), f !== a && t(r).find(\"[data-dt-idx=\" + f + \"]\").focus();\n          }\n        }\n      }), t.extend(u.ext.type.detect, [function (t, e) {\n        var n = e.oLanguage.sDecimal;\n        return m(t, n) ? \"num\" + n : null;\n      }, function (t, e) {\n        if (t && !(t instanceof Date) && !h.test(t)) return null;\n        var n = Date.parse(t);\n        return null !== n && !isNaN(n) || v(t) ? \"date\" : null;\n      }, function (t, e) {\n        var n = e.oLanguage.sDecimal;\n        return m(t, n, !0) ? \"num-fmt\" + n : null;\n      }, function (t, e) {\n        var n = e.oLanguage.sDecimal;\n        return S(t, n) ? \"html-num\" + n : null;\n      }, function (t, e) {\n        var n = e.oLanguage.sDecimal;\n        return S(t, n, !0) ? \"html-num-fmt\" + n : null;\n      }, function (t, e) {\n        return v(t) || \"string\" == typeof t && -1 !== t.indexOf(\"<\") ? \"html\" : null;\n      }]), t.extend(u.ext.type.search, {\n        html: function html(t) {\n          return v(t) ? t : \"string\" == typeof t ? t.replace(f, \" \").replace(d, \"\") : \"\";\n        },\n        string: function string(t) {\n          return v(t) ? t : \"string\" == typeof t ? t.replace(f, \" \") : t;\n        }\n      });\n\n      var Fe = function Fe(t, e, n, r) {\n        return 0 === t || t && \"-\" !== t ? (e && (t = y(t, e)), t.replace && (n && (t = t.replace(n, \"\")), r && (t = t.replace(r, \"\"))), 1 * t) : -1 / 0;\n      };\n\n      function Pe(e) {\n        t.each({\n          num: function num(t) {\n            return Fe(t, e);\n          },\n          \"num-fmt\": function numFmt(t) {\n            return Fe(t, e, g);\n          },\n          \"html-num\": function htmlNum(t) {\n            return Fe(t, e, d);\n          },\n          \"html-num-fmt\": function htmlNumFmt(t) {\n            return Fe(t, e, d, g);\n          }\n        }, function (t, n) {\n          o.type.order[t + e + \"-pre\"] = n, t.match(/^html\\-/) && (o.type.search[t + e] = o.type.search.html);\n        });\n      }\n\n      t.extend(o.type.order, {\n        \"date-pre\": function datePre(t) {\n          var e = Date.parse(t);\n          return isNaN(e) ? -1 / 0 : e;\n        },\n        \"html-pre\": function htmlPre(t) {\n          return v(t) ? \"\" : t.replace ? t.replace(/<.*?>/g, \"\").toLowerCase() : t + \"\";\n        },\n        \"string-pre\": function stringPre(t) {\n          return v(t) ? \"\" : \"string\" == typeof t ? t.toLowerCase() : t.toString ? t.toString() : \"\";\n        },\n        \"string-asc\": function stringAsc(t, e) {\n          return t < e ? -1 : t > e ? 1 : 0;\n        },\n        \"string-desc\": function stringDesc(t, e) {\n          return t < e ? 1 : t > e ? -1 : 0;\n        }\n      }), Pe(\"\"), t.extend(!0, u.ext.renderer, {\n        header: {\n          _: function _(e, n, r, a) {\n            t(e.nTable).on(\"order.dt.DT\", function (t, o, i, s) {\n              if (e === o) {\n                var l = r.idx;\n                n.removeClass(r.sSortingClass + \" \" + a.sSortAsc + \" \" + a.sSortDesc).addClass(\"asc\" == s[l] ? a.sSortAsc : \"desc\" == s[l] ? a.sSortDesc : r.sSortingClass);\n              }\n            });\n          },\n          jqueryui: function jqueryui(e, n, r, a) {\n            t(\"<div/>\").addClass(a.sSortJUIWrapper).append(n.contents()).append(t(\"<span/>\").addClass(a.sSortIcon + \" \" + r.sSortingClassJUI)).appendTo(n), t(e.nTable).on(\"order.dt.DT\", function (t, o, i, s) {\n              if (e === o) {\n                var l = r.idx;\n                n.removeClass(a.sSortAsc + \" \" + a.sSortDesc).addClass(\"asc\" == s[l] ? a.sSortAsc : \"desc\" == s[l] ? a.sSortDesc : r.sSortingClass), n.find(\"span.\" + a.sSortIcon).removeClass(a.sSortJUIAsc + \" \" + a.sSortJUIDesc + \" \" + a.sSortJUI + \" \" + a.sSortJUIAscAllowed + \" \" + a.sSortJUIDescAllowed).addClass(\"asc\" == s[l] ? a.sSortJUIAsc : \"desc\" == s[l] ? a.sSortJUIDesc : r.sSortingClassJUI);\n              }\n            });\n          }\n        }\n      });\n\n      var Le = function Le(t) {\n        return \"string\" == typeof t ? t.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\") : t;\n      };\n\n      function Re(t) {\n        return function () {\n          var e = [ie(this[u.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));\n          return u.ext.internal[t].apply(this, e);\n        };\n      }\n\n      return u.render = {\n        number: function number(t, e, n, r, a) {\n          return {\n            display: function display(o) {\n              if (\"number\" != typeof o && \"string\" != typeof o) return o;\n              var i = o < 0 ? \"-\" : \"\",\n                  s = parseFloat(o);\n              if (isNaN(s)) return Le(o);\n              s = s.toFixed(n), o = Math.abs(s);\n              var l = parseInt(o, 10),\n                  u = n ? e + (o - l).toFixed(n).substring(2) : \"\";\n              return i + (r || \"\") + l.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, t) + u + (a || \"\");\n            }\n          };\n        },\n        text: function text() {\n          return {\n            display: Le\n          };\n        }\n      }, t.extend(u.ext.internal, {\n        _fnExternApiFunc: Re,\n        _fnBuildAjax: ht,\n        _fnAjaxUpdate: pt,\n        _fnAjaxParameters: gt,\n        _fnAjaxUpdateDraw: vt,\n        _fnAjaxDataSrc: bt,\n        _fnAddColumn: E,\n        _fnColumnOptions: N,\n        _fnAdjustColumnSizing: k,\n        _fnVisibleToColumnIndex: M,\n        _fnColumnIndexToVisible: H,\n        _fnVisbleColumns: W,\n        _fnGetColumns: B,\n        _fnColumnTypes: U,\n        _fnApplyColumnDefs: V,\n        _fnHungarianMap: I,\n        _fnCamelToHungarian: A,\n        _fnLanguageCompat: j,\n        _fnBrowserDetect: R,\n        _fnAddData: J,\n        _fnAddTr: X,\n        _fnNodeToDataIndex: function _fnNodeToDataIndex(t, e) {\n          return e._DT_RowIndex !== a ? e._DT_RowIndex : null;\n        },\n        _fnNodeToColumnIndex: function _fnNodeToColumnIndex(e, n, r) {\n          return t.inArray(r, e.aoData[n].anCells);\n        },\n        _fnGetCellData: G,\n        _fnSetCellData: $,\n        _fnSplitObjNotation: Y,\n        _fnGetObjectDataFn: Z,\n        _fnSetObjectDataFn: Q,\n        _fnGetDataMaster: K,\n        _fnClearTable: tt,\n        _fnDeleteIndex: et,\n        _fnInvalidate: nt,\n        _fnGetRowElements: rt,\n        _fnCreateTr: at,\n        _fnBuildHead: it,\n        _fnDrawHead: st,\n        _fnDraw: lt,\n        _fnReDraw: ut,\n        _fnAddOptionsHtml: ct,\n        _fnDetectHeader: ft,\n        _fnGetUniqueThs: dt,\n        _fnFeatureHtmlFilter: yt,\n        _fnFilterComplete: mt,\n        _fnFilterCustom: St,\n        _fnFilterColumn: xt,\n        _fnFilter: Dt,\n        _fnFilterCreateSearch: wt,\n        _fnEscapeRegex: _t,\n        _fnFilterData: It,\n        _fnFeatureHtmlInfo: Ft,\n        _fnUpdateInfo: Pt,\n        _fnInfoMacros: Lt,\n        _fnInitialise: Rt,\n        _fnInitComplete: Ot,\n        _fnLengthChange: Et,\n        _fnFeatureHtmlLength: Nt,\n        _fnFeatureHtmlPaginate: kt,\n        _fnPageChange: Mt,\n        _fnFeatureHtmlProcessing: Ht,\n        _fnProcessingDisplay: Wt,\n        _fnFeatureHtmlTable: Bt,\n        _fnScrollDraw: Ut,\n        _fnApplyToChildren: Vt,\n        _fnCalculateColumnWidths: Xt,\n        _fnThrottle: Gt,\n        _fnConvertToWidth: $t,\n        _fnGetWidestNode: qt,\n        _fnGetMaxLenString: zt,\n        _fnStringToCss: Yt,\n        _fnSortFlatten: Zt,\n        _fnSort: Qt,\n        _fnSortAria: Kt,\n        _fnSortListener: te,\n        _fnSortAttachListener: ee,\n        _fnSortingClasses: ne,\n        _fnSortData: re,\n        _fnSaveState: ae,\n        _fnLoadState: oe,\n        _fnSettingsFromNode: ie,\n        _fnLog: se,\n        _fnMap: le,\n        _fnBindAction: ce,\n        _fnCallbackReg: fe,\n        _fnCallbackFire: de,\n        _fnLengthOverflow: he,\n        _fnRenderer: pe,\n        _fnDataSource: ge,\n        _fnRowAttributes: ot,\n        _fnExtend: ue,\n        _fnCalculateEnd: function _fnCalculateEnd() {}\n      }), t.fn.dataTable = u, u.$ = t, t.fn.dataTableSettings = u.settings, t.fn.dataTableExt = u.ext, t.fn.DataTable = function (e) {\n        return t(this).dataTable(e).api();\n      }, t.each(u, function (e, n) {\n        t.fn.DataTable[e] = n;\n      }), t.fn.dataTable;\n    },  true && n(83) ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t) {\n      return e(t, window, document);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" === ( false ? undefined : r(exports)) ? t.exports = function (t, r) {\n      return t || (t = window), r || (r = \"undefined\" != typeof window ? n(118) : n(118)(t)), e(r, t, t.document);\n    } : e(jQuery, window, document),\n    /*! DataTables Bootstrap 4 integration\n     * ©2011-2017 SpryMedia Ltd - datatables.net/license\n     */\n    function (e) {\n       true && n(83) ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"), !(function webpackMissingModule() { var e = new Error(\"Cannot find module 'datatables.net'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_RESULT__ = (function (t) {\n        return e(t, window, document);\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : \"object\" === ( false ? undefined : r(exports)) ? t.exports = function (t, r) {\n        return t || (t = window), r && r.fn.dataTable || (r = n(216)(t, r).$), e(r, t, t.document);\n      } : e(jQuery, window, document);\n    }(function (t, e, n, r) {\n      var a = t.fn.dataTable;\n      return t.extend(!0, a.defaults, {\n        dom: \"<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>\",\n        renderer: \"bootstrap\"\n      }), t.extend(a.ext.classes, {\n        sWrapper: \"dataTables_wrapper dt-bootstrap4\",\n        sFilterInput: \"form-control form-control-sm\",\n        sLengthSelect: \"custom-select custom-select-sm form-control form-control-sm\",\n        sProcessing: \"dataTables_processing card\",\n        sPageButton: \"paginate_button page-item\"\n      }), a.ext.renderer.pageButton.bootstrap = function (e, o, i, s, l, u) {\n        var c,\n            f,\n            d,\n            h = new a.Api(e),\n            p = e.oClasses,\n            g = e.oLanguage.oPaginate,\n            v = e.oLanguage.oAria.paginate || {},\n            b = 0;\n\n        try {\n          d = t(o).find(n.activeElement).data(\"dt-idx\");\n        } catch (t) {}\n\n        !function n(r, a) {\n          var o,\n              s,\n              d,\n              y,\n              m = function m(e) {\n            e.preventDefault(), t(e.currentTarget).hasClass(\"disabled\") || h.page() == e.data.action || h.page(e.data.action).draw(\"page\");\n          };\n\n          for (o = 0, s = a.length; o < s; o++) {\n            if (y = a[o], t.isArray(y)) n(r, y);else {\n              switch (c = \"\", f = \"\", y) {\n                case \"ellipsis\":\n                  c = \"&#x2026;\", f = \"disabled\";\n                  break;\n\n                case \"first\":\n                  c = g.sFirst, f = y + (l > 0 ? \"\" : \" disabled\");\n                  break;\n\n                case \"previous\":\n                  c = g.sPrevious, f = y + (l > 0 ? \"\" : \" disabled\");\n                  break;\n\n                case \"next\":\n                  c = g.sNext, f = y + (l < u - 1 ? \"\" : \" disabled\");\n                  break;\n\n                case \"last\":\n                  c = g.sLast, f = y + (l < u - 1 ? \"\" : \" disabled\");\n                  break;\n\n                default:\n                  c = y + 1, f = l === y ? \"active\" : \"\";\n              }\n\n              c && (d = t(\"<li>\", {\n                \"class\": p.sPageButton + \" \" + f,\n                id: 0 === i && \"string\" == typeof y ? e.sTableId + \"_\" + y : null\n              }).append(t(\"<a>\", {\n                href: \"#\",\n                \"aria-controls\": e.sTableId,\n                \"aria-label\": v[y],\n                \"data-dt-idx\": b,\n                tabindex: e.iTabIndex,\n                \"class\": \"page-link\"\n              }).html(c)).appendTo(r), e.oApi._fnBindAction(d, {\n                action: y\n              }, m), b++);\n            }\n          }\n        }(t(o).empty().html('<ul class=\"pagination\"/>').children(\"ul\"), s), d !== r && t(o).find(\"[data-dt-idx=\" + d + \"]\").focus();\n      }, a;\n    });\n  }.call(this, n(95)(t));\n}, function (t, e, n) {\n  \"use strict\";\n\n  var r = n(4),\n      a = n(128).right;\n  r({\n    target: \"Array\",\n    proto: !0,\n    forced: n(52)(\"reduceRight\")\n  }, {\n    reduceRight: function reduceRight(t) {\n      return a(this, t, arguments.length, arguments.length > 1 ? arguments[1] : void 0);\n    }\n  });\n}, function (t, e, n) {}]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/mdb/js/addons/datatables.min.js\n");

/***/ }),

/***/ 3:
/*!******************************************************!*\
  !*** multi ./public/mdb/js/addons/datatables.min.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\Users\Gaoussou\Documents\udemy\Piotr Jura\larabnb\public\mdb\js\addons\datatables.min.js */"./public/mdb/js/addons/datatables.min.js");


/***/ })

/******/ });